// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class Cancelled extends ethereum.Event {
  get params(): Cancelled__Params {
    return new Cancelled__Params(this);
  }
}

export class Cancelled__Params {
  _event: Cancelled;

  constructor(event: Cancelled) {
    this._event = event;
  }

  get uri(): string {
    return this._event.parameters[0].value.toString();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class DeliveryRejected extends ethereum.Event {
  get params(): DeliveryRejected__Params {
    return new DeliveryRejected__Params(this);
  }
}

export class DeliveryRejected__Params {
  _event: DeliveryRejected;

  constructor(event: DeliveryRejected) {
    this._event = event;
  }

  get admin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sbtId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get uri(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class ERC20PaymentReleased extends ethereum.Event {
  get params(): ERC20PaymentReleased__Params {
    return new ERC20PaymentReleased__Params(this);
  }
}

export class ERC20PaymentReleased__Params {
  _event: ERC20PaymentReleased;

  constructor(event: ERC20PaymentReleased) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Executed extends ethereum.Event {
  get params(): Executed__Params {
    return new Executed__Params(this);
  }
}

export class Executed__Params {
  _event: Executed;

  constructor(event: Executed) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class FundsSent extends ethereum.Event {
  get params(): FundsSent__Params {
    return new FundsSent__Params(this);
  }
}

export class FundsSent__Params {
  _event: FundsSent;

  constructor(event: FundsSent) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get token(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class GUIDCreated extends ethereum.Event {
  get params(): GUIDCreated__Params {
    return new GUIDCreated__Params(this);
  }
}

export class GUIDCreated__Params {
  _event: GUIDCreated;

  constructor(event: GUIDCreated) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get guid(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class GUIDURIChange extends ethereum.Event {
  get params(): GUIDURIChange__Params {
    return new GUIDURIChange__Params(this);
  }
}

export class GUIDURIChange__Params {
  _event: GUIDURIChange;

  constructor(event: GUIDURIChange) {
    this._event = event;
  }

  get value(): string {
    return this._event.parameters[0].value.toString();
  }

  get guid(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class Nominate extends ethereum.Event {
  get params(): Nominate__Params {
    return new Nominate__Params(this);
  }
}

export class Nominate__Params {
  _event: Nominate;

  constructor(event: Nominate) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get uri(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PaymentReceived extends ethereum.Event {
  get params(): PaymentReceived__Params {
    return new PaymentReceived__Params(this);
  }
}

export class PaymentReceived__Params {
  _event: PaymentReceived;

  constructor(event: PaymentReceived) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class PaymentReleased extends ethereum.Event {
  get params(): PaymentReleased__Params {
    return new PaymentReleased__Params(this);
  }
}

export class PaymentReleased__Params {
  _event: PaymentReleased;

  constructor(event: PaymentReleased) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Post extends ethereum.Event {
  get params(): Post__Params {
    return new Post__Params(this);
  }
}

export class Post__Params {
  _event: Post;

  constructor(event: Post) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get entRole(): string {
    return this._event.parameters[2].value.toString();
  }

  get uri(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class RoleCreated extends ethereum.Event {
  get params(): RoleCreated__Params {
    return new RoleCreated__Params(this);
  }
}

export class RoleCreated__Params {
  _event: RoleCreated;

  constructor(event: RoleCreated) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get role(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class RoleURIChange extends ethereum.Event {
  get params(): RoleURIChange__Params {
    return new RoleURIChange__Params(this);
  }
}

export class RoleURIChange__Params {
  _event: RoleURIChange;

  constructor(event: RoleURIChange) {
    this._event = event;
  }

  get value(): string {
    return this._event.parameters[0].value.toString();
  }

  get role(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class Stage extends ethereum.Event {
  get params(): Stage__Params {
    return new Stage__Params(this);
  }
}

export class Stage__Params {
  _event: Stage;

  constructor(event: Stage) {
    this._event = event;
  }

  get stage(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class TransferBatch extends ethereum.Event {
  get params(): TransferBatch__Params {
    return new TransferBatch__Params(this);
  }
}

export class TransferBatch__Params {
  _event: TransferBatch;

  constructor(event: TransferBatch) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get values(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class TransferBatchByToken extends ethereum.Event {
  get params(): TransferBatchByToken__Params {
    return new TransferBatchByToken__Params(this);
  }
}

export class TransferBatchByToken__Params {
  _event: TransferBatchByToken;

  constructor(event: TransferBatchByToken) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get fromOwnerToken(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get toOwnerToken(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get ids(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get values(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class TransferByToken extends ethereum.Event {
  get params(): TransferByToken__Params {
    return new TransferByToken__Params(this);
  }
}

export class TransferByToken__Params {
  _event: TransferByToken;

  constructor(event: TransferByToken) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get fromOwnerToken(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get toOwnerToken(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get id(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class TransferSingle extends ethereum.Event {
  get params(): TransferSingle__Params {
    return new TransferSingle__Params(this);
  }
}

export class TransferSingle__Params {
  _event: TransferSingle;

  constructor(event: TransferSingle) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class URI extends ethereum.Event {
  get params(): URI__Params {
    return new URI__Params(this);
  }
}

export class URI__Params {
  _event: URI;

  constructor(event: URI) {
    this._event = event;
  }

  get value(): string {
    return this._event.parameters[0].value.toString();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Verdict extends ethereum.Event {
  get params(): Verdict__Params {
    return new Verdict__Params(this);
  }
}

export class Verdict__Params {
  _event: Verdict;

  constructor(event: Verdict) {
    this._event = event;
  }

  get uri(): string {
    return this._event.parameters[0].value.toString();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Claim extends ethereum.SmartContract {
  static bind(address: Address): Claim {
    return new Claim("Claim", address);
  }

  GUIDHas(account: Address, guid: Bytes): boolean {
    let result = super.call("GUIDHas", "GUIDHas(address,bytes32):(bool)", [
      ethereum.Value.fromAddress(account),
      ethereum.Value.fromFixedBytes(guid),
    ]);

    return result[0].toBoolean();
  }

  try_GUIDHas(account: Address, guid: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall("GUIDHas", "GUIDHas(address,bytes32):(bool)", [
      ethereum.Value.fromAddress(account),
      ethereum.Value.fromFixedBytes(guid),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  GUIDHasByToken(soulToken: BigInt, guid: Bytes): boolean {
    let result = super.call(
      "GUIDHasByToken",
      "GUIDHasByToken(uint256,bytes32):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(soulToken),
        ethereum.Value.fromFixedBytes(guid),
      ],
    );

    return result[0].toBoolean();
  }

  try_GUIDHasByToken(
    soulToken: BigInt,
    guid: Bytes,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "GUIDHasByToken",
      "GUIDHasByToken(uint256,bytes32):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(soulToken),
        ethereum.Value.fromFixedBytes(guid),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  GUIDURI(guid: Bytes): string {
    let result = super.call("GUIDURI", "GUIDURI(bytes32):(string)", [
      ethereum.Value.fromFixedBytes(guid),
    ]);

    return result[0].toString();
  }

  try_GUIDURI(guid: Bytes): ethereum.CallResult<string> {
    let result = super.tryCall("GUIDURI", "GUIDURI(bytes32):(string)", [
      ethereum.Value.fromFixedBytes(guid),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  balanceOf(account: Address, id: BigInt): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id),
      ],
    );

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address, id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfBatch(accounts: Array<Address>, ids: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids),
      ],
    );

    return result[0].toBigIntArray();
  }

  try_balanceOfBatch(
    accounts: Array<Address>,
    ids: Array<BigInt>,
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  balanceOfToken(sbt: BigInt, id: BigInt): BigInt {
    let result = super.call(
      "balanceOfToken",
      "balanceOfToken(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(sbt),
        ethereum.Value.fromUnsignedBigInt(id),
      ],
    );

    return result[0].toBigInt();
  }

  try_balanceOfToken(sbt: BigInt, id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfToken",
      "balanceOfToken(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(sbt),
        ethereum.Value.fromUnsignedBigInt(id),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  confGet(key: string): string {
    let result = super.call("confGet", "confGet(string):(string)", [
      ethereum.Value.fromString(key),
    ]);

    return result[0].toString();
  }

  try_confGet(key: string): ethereum.CallResult<string> {
    let result = super.tryCall("confGet", "confGet(string):(string)", [
      ethereum.Value.fromString(key),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  contractBalance(token: Address): BigInt {
    let result = super.call(
      "contractBalance",
      "contractBalance(address):(uint256)",
      [ethereum.Value.fromAddress(token)],
    );

    return result[0].toBigInt();
  }

  try_contractBalance(token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "contractBalance",
      "contractBalance(address):(uint256)",
      [ethereum.Value.fromAddress(token)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  contractURI(): string {
    let result = super.call("contractURI", "contractURI():(string)", []);

    return result[0].toString();
  }

  try_contractURI(): ethereum.CallResult<string> {
    let result = super.tryCall("contractURI", "contractURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getCurrentSBT(): BigInt {
    let result = super.call("getCurrentSBT", "getCurrentSBT():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getCurrentSBT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentSBT",
      "getCurrentSBT():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getExtTokenId(account: Address): BigInt {
    let result = super.call(
      "getExtTokenId",
      "getExtTokenId(address):(uint256)",
      [ethereum.Value.fromAddress(account)],
    );

    return result[0].toBigInt();
  }

  try_getExtTokenId(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getExtTokenId",
      "getExtTokenId(address):(uint256)",
      [ethereum.Value.fromAddress(account)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getHub(): Address {
    let result = super.call("getHub", "getHub():(address)", []);

    return result[0].toAddress();
  }

  try_getHub(): ethereum.CallResult<Address> {
    let result = super.tryCall("getHub", "getHub():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRepoAddr(): Address {
    let result = super.call("getRepoAddr", "getRepoAddr():(address)", []);

    return result[0].toAddress();
  }

  try_getRepoAddr(): ethereum.CallResult<Address> {
    let result = super.tryCall("getRepoAddr", "getRepoAddr():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getTargetContract(): Address {
    let result = super.call(
      "getTargetContract",
      "getTargetContract():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_getTargetContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getTargetContract",
      "getTargetContract():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isApprovedForAll(account: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator),
      ],
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    account: Address,
    operator: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  roleExist(role: string): boolean {
    let result = super.call("roleExist", "roleExist(string):(bool)", [
      ethereum.Value.fromString(role),
    ]);

    return result[0].toBoolean();
  }

  try_roleExist(role: string): ethereum.CallResult<boolean> {
    let result = super.tryCall("roleExist", "roleExist(string):(bool)", [
      ethereum.Value.fromString(role),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  roleHas(account: Address, role: string): boolean {
    let result = super.call("roleHas", "roleHas(address,string):(bool)", [
      ethereum.Value.fromAddress(account),
      ethereum.Value.fromString(role),
    ]);

    return result[0].toBoolean();
  }

  try_roleHas(account: Address, role: string): ethereum.CallResult<boolean> {
    let result = super.tryCall("roleHas", "roleHas(address,string):(bool)", [
      ethereum.Value.fromAddress(account),
      ethereum.Value.fromString(role),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  roleHasByToken(soulToken: BigInt, role: string): boolean {
    let result = super.call(
      "roleHasByToken",
      "roleHasByToken(uint256,string):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(soulToken),
        ethereum.Value.fromString(role),
      ],
    );

    return result[0].toBoolean();
  }

  try_roleHasByToken(
    soulToken: BigInt,
    role: string,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "roleHasByToken",
      "roleHasByToken(uint256,string):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(soulToken),
        ethereum.Value.fromString(role),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  roleToId(role: string): BigInt {
    let result = super.call("roleToId", "roleToId(string):(uint256)", [
      ethereum.Value.fromString(role),
    ]);

    return result[0].toBigInt();
  }

  try_roleToId(role: string): ethereum.CallResult<BigInt> {
    let result = super.tryCall("roleToId", "roleToId(string):(uint256)", [
      ethereum.Value.fromString(role),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  roleURI(role: string): string {
    let result = super.call("roleURI", "roleURI(string):(string)", [
      ethereum.Value.fromString(role),
    ]);

    return result[0].toString();
  }

  try_roleURI(role: string): ethereum.CallResult<string> {
    let result = super.tryCall("roleURI", "roleURI(string):(string)", [
      ethereum.Value.fromString(role),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  rolesHas(account: Address, roles: Array<string>): boolean {
    let result = super.call("rolesHas", "rolesHas(address,string[]):(bool)", [
      ethereum.Value.fromAddress(account),
      ethereum.Value.fromStringArray(roles),
    ]);

    return result[0].toBoolean();
  }

  try_rolesHas(
    account: Address,
    roles: Array<string>,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "rolesHas",
      "rolesHas(address,string[]):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromStringArray(roles),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  stage(): i32 {
    let result = super.call("stage", "stage():(uint8)", []);

    return result[0].toI32();
  }

  try_stage(): ethereum.CallResult<i32> {
    let result = super.tryCall("stage", "stage():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  uniqueMembers(id: BigInt): Array<BigInt> {
    let result = super.call(
      "uniqueMembers",
      "uniqueMembers(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(id)],
    );

    return result[0].toBigIntArray();
  }

  try_uniqueMembers(id: BigInt): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "uniqueMembers",
      "uniqueMembers(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(id)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  uniqueMembersCount(id: BigInt): BigInt {
    let result = super.call(
      "uniqueMembersCount",
      "uniqueMembersCount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)],
    );

    return result[0].toBigInt();
  }

  try_uniqueMembersCount(id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "uniqueMembersCount",
      "uniqueMembersCount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  uniqueRoleMembers(role: string): Array<BigInt> {
    let result = super.call(
      "uniqueRoleMembers",
      "uniqueRoleMembers(string):(uint256[])",
      [ethereum.Value.fromString(role)],
    );

    return result[0].toBigIntArray();
  }

  try_uniqueRoleMembers(role: string): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "uniqueRoleMembers",
      "uniqueRoleMembers(string):(uint256[])",
      [ethereum.Value.fromString(role)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  uniqueRoleMembersCount(role: string): BigInt {
    let result = super.call(
      "uniqueRoleMembersCount",
      "uniqueRoleMembersCount(string):(uint256)",
      [ethereum.Value.fromString(role)],
    );

    return result[0].toBigInt();
  }

  try_uniqueRoleMembersCount(role: string): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "uniqueRoleMembersCount",
      "uniqueRoleMembersCount(string):(uint256)",
      [ethereum.Value.fromString(role)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  uri(token_id: BigInt): string {
    let result = super.call("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(token_id),
    ]);

    return result[0].toString();
  }

  try_uri(token_id: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(token_id),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class AcceptApplicantCall extends ethereum.Call {
  get inputs(): AcceptApplicantCall__Inputs {
    return new AcceptApplicantCall__Inputs(this);
  }

  get outputs(): AcceptApplicantCall__Outputs {
    return new AcceptApplicantCall__Outputs(this);
  }
}

export class AcceptApplicantCall__Inputs {
  _call: AcceptApplicantCall;

  constructor(call: AcceptApplicantCall) {
    this._call = call;
  }

  get sbtId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class AcceptApplicantCall__Outputs {
  _call: AcceptApplicantCall;

  constructor(call: AcceptApplicantCall) {
    this._call = call;
  }
}

export class ApplicationCall extends ethereum.Call {
  get inputs(): ApplicationCall__Inputs {
    return new ApplicationCall__Inputs(this);
  }

  get outputs(): ApplicationCall__Outputs {
    return new ApplicationCall__Outputs(this);
  }
}

export class ApplicationCall__Inputs {
  _call: ApplicationCall;

  constructor(call: ApplicationCall) {
    this._call = call;
  }

  get uri_(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class ApplicationCall__Outputs {
  _call: ApplicationCall;

  constructor(call: ApplicationCall) {
    this._call = call;
  }
}

export class CancelCall extends ethereum.Call {
  get inputs(): CancelCall__Inputs {
    return new CancelCall__Inputs(this);
  }

  get outputs(): CancelCall__Outputs {
    return new CancelCall__Outputs(this);
  }
}

export class CancelCall__Inputs {
  _call: CancelCall;

  constructor(call: CancelCall) {
    this._call = call;
  }

  get uri_(): string {
    return this._call.inputValues[0].value.toString();
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class CancelCall__Outputs {
  _call: CancelCall;

  constructor(call: CancelCall) {
    this._call = call;
  }
}

export class ConfSetCall extends ethereum.Call {
  get inputs(): ConfSetCall__Inputs {
    return new ConfSetCall__Inputs(this);
  }

  get outputs(): ConfSetCall__Outputs {
    return new ConfSetCall__Outputs(this);
  }
}

export class ConfSetCall__Inputs {
  _call: ConfSetCall;

  constructor(call: ConfSetCall) {
    this._call = call;
  }

  get key(): string {
    return this._call.inputValues[0].value.toString();
  }

  get value(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class ConfSetCall__Outputs {
  _call: ConfSetCall;

  constructor(call: ConfSetCall) {
    this._call = call;
  }
}

export class DeliveryApproveCall extends ethereum.Call {
  get inputs(): DeliveryApproveCall__Inputs {
    return new DeliveryApproveCall__Inputs(this);
  }

  get outputs(): DeliveryApproveCall__Outputs {
    return new DeliveryApproveCall__Outputs(this);
  }
}

export class DeliveryApproveCall__Inputs {
  _call: DeliveryApproveCall;

  constructor(call: DeliveryApproveCall) {
    this._call = call;
  }

  get sbtId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DeliveryApproveCall__Outputs {
  _call: DeliveryApproveCall;

  constructor(call: DeliveryApproveCall) {
    this._call = call;
  }
}

export class DeliveryRejectCall extends ethereum.Call {
  get inputs(): DeliveryRejectCall__Inputs {
    return new DeliveryRejectCall__Inputs(this);
  }

  get outputs(): DeliveryRejectCall__Outputs {
    return new DeliveryRejectCall__Outputs(this);
  }
}

export class DeliveryRejectCall__Inputs {
  _call: DeliveryRejectCall;

  constructor(call: DeliveryRejectCall) {
    this._call = call;
  }

  get sbtId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get uri_(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class DeliveryRejectCall__Outputs {
  _call: DeliveryRejectCall;

  constructor(call: DeliveryRejectCall) {
    this._call = call;
  }
}

export class DisburseCall extends ethereum.Call {
  get inputs(): DisburseCall__Inputs {
    return new DisburseCall__Inputs(this);
  }

  get outputs(): DisburseCall__Outputs {
    return new DisburseCall__Outputs(this);
  }
}

export class DisburseCall__Inputs {
  _call: DisburseCall;

  constructor(call: DisburseCall) {
    this._call = call;
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class DisburseCall__Outputs {
  _call: DisburseCall;

  constructor(call: DisburseCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get sbtAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class Initialize1Call extends ethereum.Call {
  get inputs(): Initialize1Call__Inputs {
    return new Initialize1Call__Inputs(this);
  }

  get outputs(): Initialize1Call__Outputs {
    return new Initialize1Call__Outputs(this);
  }
}

export class Initialize1Call__Inputs {
  _call: Initialize1Call;

  constructor(call: Initialize1Call) {
    this._call = call;
  }

  get name_(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class Initialize1Call__Outputs {
  _call: Initialize1Call;

  constructor(call: Initialize1Call) {
    this._call = call;
  }
}

export class NominateCall extends ethereum.Call {
  get inputs(): NominateCall__Inputs {
    return new NominateCall__Inputs(this);
  }

  get outputs(): NominateCall__Outputs {
    return new NominateCall__Outputs(this);
  }
}

export class NominateCall__Inputs {
  _call: NominateCall;

  constructor(call: NominateCall) {
    this._call = call;
  }

  get soulToken(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get uri_(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class NominateCall__Outputs {
  _call: NominateCall;

  constructor(call: NominateCall) {
    this._call = call;
  }
}

export class PostCall extends ethereum.Call {
  get inputs(): PostCall__Inputs {
    return new PostCall__Inputs(this);
  }

  get outputs(): PostCall__Outputs {
    return new PostCall__Outputs(this);
  }
}

export class PostCall__Inputs {
  _call: PostCall;

  constructor(call: PostCall) {
    this._call = call;
  }

  get entRole(): string {
    return this._call.inputValues[0].value.toString();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get uri_(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class PostCall__Outputs {
  _call: PostCall;

  constructor(call: PostCall) {
    this._call = call;
  }
}

export class RefundCall extends ethereum.Call {
  get inputs(): RefundCall__Inputs {
    return new RefundCall__Inputs(this);
  }

  get outputs(): RefundCall__Outputs {
    return new RefundCall__Outputs(this);
  }
}

export class RefundCall__Inputs {
  _call: RefundCall;

  constructor(call: RefundCall) {
    this._call = call;
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class RefundCall__Outputs {
  _call: RefundCall;

  constructor(call: RefundCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RoleAssignCall extends ethereum.Call {
  get inputs(): RoleAssignCall__Inputs {
    return new RoleAssignCall__Inputs(this);
  }

  get outputs(): RoleAssignCall__Outputs {
    return new RoleAssignCall__Outputs(this);
  }
}

export class RoleAssignCall__Inputs {
  _call: RoleAssignCall;

  constructor(call: RoleAssignCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get role(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class RoleAssignCall__Outputs {
  _call: RoleAssignCall;

  constructor(call: RoleAssignCall) {
    this._call = call;
  }
}

export class RoleAssignToTokenCall extends ethereum.Call {
  get inputs(): RoleAssignToTokenCall__Inputs {
    return new RoleAssignToTokenCall__Inputs(this);
  }

  get outputs(): RoleAssignToTokenCall__Outputs {
    return new RoleAssignToTokenCall__Outputs(this);
  }
}

export class RoleAssignToTokenCall__Inputs {
  _call: RoleAssignToTokenCall;

  constructor(call: RoleAssignToTokenCall) {
    this._call = call;
  }

  get ownerToken(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get role(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class RoleAssignToTokenCall__Outputs {
  _call: RoleAssignToTokenCall;

  constructor(call: RoleAssignToTokenCall) {
    this._call = call;
  }
}

export class RoleChangeCall extends ethereum.Call {
  get inputs(): RoleChangeCall__Inputs {
    return new RoleChangeCall__Inputs(this);
  }

  get outputs(): RoleChangeCall__Outputs {
    return new RoleChangeCall__Outputs(this);
  }
}

export class RoleChangeCall__Inputs {
  _call: RoleChangeCall;

  constructor(call: RoleChangeCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get roleOld(): string {
    return this._call.inputValues[1].value.toString();
  }

  get roleNew(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class RoleChangeCall__Outputs {
  _call: RoleChangeCall;

  constructor(call: RoleChangeCall) {
    this._call = call;
  }
}

export class RoleCreateCall extends ethereum.Call {
  get inputs(): RoleCreateCall__Inputs {
    return new RoleCreateCall__Inputs(this);
  }

  get outputs(): RoleCreateCall__Outputs {
    return new RoleCreateCall__Outputs(this);
  }
}

export class RoleCreateCall__Inputs {
  _call: RoleCreateCall;

  constructor(call: RoleCreateCall) {
    this._call = call;
  }

  get role(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class RoleCreateCall__Outputs {
  _call: RoleCreateCall;

  constructor(call: RoleCreateCall) {
    this._call = call;
  }
}

export class RoleRemoveCall extends ethereum.Call {
  get inputs(): RoleRemoveCall__Inputs {
    return new RoleRemoveCall__Inputs(this);
  }

  get outputs(): RoleRemoveCall__Outputs {
    return new RoleRemoveCall__Outputs(this);
  }
}

export class RoleRemoveCall__Inputs {
  _call: RoleRemoveCall;

  constructor(call: RoleRemoveCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get role(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class RoleRemoveCall__Outputs {
  _call: RoleRemoveCall;

  constructor(call: RoleRemoveCall) {
    this._call = call;
  }
}

export class RoleRemoveFromTokenCall extends ethereum.Call {
  get inputs(): RoleRemoveFromTokenCall__Inputs {
    return new RoleRemoveFromTokenCall__Inputs(this);
  }

  get outputs(): RoleRemoveFromTokenCall__Outputs {
    return new RoleRemoveFromTokenCall__Outputs(this);
  }
}

export class RoleRemoveFromTokenCall__Inputs {
  _call: RoleRemoveFromTokenCall;

  constructor(call: RoleRemoveFromTokenCall) {
    this._call = call;
  }

  get sbt(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get role(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class RoleRemoveFromTokenCall__Outputs {
  _call: RoleRemoveFromTokenCall;

  constructor(call: RoleRemoveFromTokenCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetContractURICall extends ethereum.Call {
  get inputs(): SetContractURICall__Inputs {
    return new SetContractURICall__Inputs(this);
  }

  get outputs(): SetContractURICall__Outputs {
    return new SetContractURICall__Outputs(this);
  }
}

export class SetContractURICall__Inputs {
  _call: SetContractURICall;

  constructor(call: SetContractURICall) {
    this._call = call;
  }

  get contractUri(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetContractURICall__Outputs {
  _call: SetContractURICall;

  constructor(call: SetContractURICall) {
    this._call = call;
  }
}

export class SetHubCall extends ethereum.Call {
  get inputs(): SetHubCall__Inputs {
    return new SetHubCall__Inputs(this);
  }

  get outputs(): SetHubCall__Outputs {
    return new SetHubCall__Outputs(this);
  }
}

export class SetHubCall__Inputs {
  _call: SetHubCall;

  constructor(call: SetHubCall) {
    this._call = call;
  }

  get hubAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetHubCall__Outputs {
  _call: SetHubCall;

  constructor(call: SetHubCall) {
    this._call = call;
  }
}

export class SetParentCTXCall extends ethereum.Call {
  get inputs(): SetParentCTXCall__Inputs {
    return new SetParentCTXCall__Inputs(this);
  }

  get outputs(): SetParentCTXCall__Outputs {
    return new SetParentCTXCall__Outputs(this);
  }
}

export class SetParentCTXCall__Inputs {
  _call: SetParentCTXCall;

  constructor(call: SetParentCTXCall) {
    this._call = call;
  }

  get container(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetParentCTXCall__Outputs {
  _call: SetParentCTXCall;

  constructor(call: SetParentCTXCall) {
    this._call = call;
  }
}

export class SetRoleURICall extends ethereum.Call {
  get inputs(): SetRoleURICall__Inputs {
    return new SetRoleURICall__Inputs(this);
  }

  get outputs(): SetRoleURICall__Outputs {
    return new SetRoleURICall__Outputs(this);
  }
}

export class SetRoleURICall__Inputs {
  _call: SetRoleURICall;

  constructor(call: SetRoleURICall) {
    this._call = call;
  }

  get role(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _tokenURI(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class SetRoleURICall__Outputs {
  _call: SetRoleURICall;

  constructor(call: SetRoleURICall) {
    this._call = call;
  }
}

export class StageCancelCall extends ethereum.Call {
  get inputs(): StageCancelCall__Inputs {
    return new StageCancelCall__Inputs(this);
  }

  get outputs(): StageCancelCall__Outputs {
    return new StageCancelCall__Outputs(this);
  }
}

export class StageCancelCall__Inputs {
  _call: StageCancelCall;

  constructor(call: StageCancelCall) {
    this._call = call;
  }

  get uri_(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class StageCancelCall__Outputs {
  _call: StageCancelCall;

  constructor(call: StageCancelCall) {
    this._call = call;
  }
}

export class StageExecusionCall extends ethereum.Call {
  get inputs(): StageExecusionCall__Inputs {
    return new StageExecusionCall__Inputs(this);
  }

  get outputs(): StageExecusionCall__Outputs {
    return new StageExecusionCall__Outputs(this);
  }
}

export class StageExecusionCall__Inputs {
  _call: StageExecusionCall;

  constructor(call: StageExecusionCall) {
    this._call = call;
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class StageExecusionCall__Outputs {
  _call: StageExecusionCall;

  constructor(call: StageExecusionCall) {
    this._call = call;
  }
}

export class StageOpenCall extends ethereum.Call {
  get inputs(): StageOpenCall__Inputs {
    return new StageOpenCall__Inputs(this);
  }

  get outputs(): StageOpenCall__Outputs {
    return new StageOpenCall__Outputs(this);
  }
}

export class StageOpenCall__Inputs {
  _call: StageOpenCall;

  constructor(call: StageOpenCall) {
    this._call = call;
  }
}

export class StageOpenCall__Outputs {
  _call: StageOpenCall;

  constructor(call: StageOpenCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
