// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class AdminChanged extends ethereum.Event {
  get params(): AdminChanged__Params {
    return new AdminChanged__Params(this);
  }
}

export class AdminChanged__Params {
  _event: AdminChanged;

  constructor(event: AdminChanged) {
    this._event = event;
  }

  get previousAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class BeaconUpgraded extends ethereum.Event {
  get params(): BeaconUpgraded__Params {
    return new BeaconUpgraded__Params(this);
  }
}

export class BeaconUpgraded__Params {
  _event: BeaconUpgraded;

  constructor(event: BeaconUpgraded) {
    this._event = event;
  }

  get beacon(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ContractCreated extends ethereum.Event {
  get params(): ContractCreated__Params {
    return new ContractCreated__Params(this);
  }
}

export class ContractCreated__Params {
  _event: ContractCreated;

  constructor(event: ContractCreated) {
    this._event = event;
  }

  get name(): string {
    return this._event.parameters[0].value.toString();
  }

  get contractAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ContractURI extends ethereum.Event {
  get params(): ContractURI__Params {
    return new ContractURI__Params(this);
  }
}

export class ContractURI__Params {
  _event: ContractURI;

  constructor(event: ContractURI) {
    this._event = event;
  }

  get param0(): string {
    return this._event.parameters[0].value.toString();
  }
}

export class HubChanged extends ethereum.Event {
  get params(): HubChanged__Params {
    return new HubChanged__Params(this);
  }
}

export class HubChanged__Params {
  _event: HubChanged;

  constructor(event: HubChanged) {
    this._event = event;
  }

  get contractAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class UpdatedImplementation extends ethereum.Event {
  get params(): UpdatedImplementation__Params {
    return new UpdatedImplementation__Params(this);
  }
}

export class UpdatedImplementation__Params {
  _event: UpdatedImplementation;

  constructor(event: UpdatedImplementation) {
    this._event = event;
  }

  get name(): string {
    return this._event.parameters[0].value.toString();
  }

  get implementation(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Hub extends ethereum.SmartContract {
  static bind(address: Address): Hub {
    return new Hub("Hub", address);
  }

  assocGet(key: string): Address {
    let result = super.call("assocGet", "assocGet(string):(address)", [
      ethereum.Value.fromString(key),
    ]);

    return result[0].toAddress();
  }

  try_assocGet(key: string): ethereum.CallResult<Address> {
    let result = super.tryCall("assocGet", "assocGet(string):(address)", [
      ethereum.Value.fromString(key),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  contractURI(): string {
    let result = super.call("contractURI", "contractURI():(string)", []);

    return result[0].toString();
  }

  try_contractURI(): ethereum.CallResult<string> {
    let result = super.tryCall("contractURI", "contractURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getRepoAddr(): Address {
    let result = super.call("getRepoAddr", "getRepoAddr():(address)", []);

    return result[0].toAddress();
  }

  try_getRepoAddr(): ethereum.CallResult<Address> {
    let result = super.tryCall("getRepoAddr", "getRepoAddr():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  makeClaim(type_: string, name_: string, uri_: string): Address {
    let result = super.call(
      "makeClaim",
      "makeClaim(string,string,string):(address)",
      [
        ethereum.Value.fromString(type_),
        ethereum.Value.fromString(name_),
        ethereum.Value.fromString(uri_),
      ],
    );

    return result[0].toAddress();
  }

  try_makeClaim(
    type_: string,
    name_: string,
    uri_: string,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "makeClaim",
      "makeClaim(string,string,string):(address)",
      [
        ethereum.Value.fromString(type_),
        ethereum.Value.fromString(name_),
        ethereum.Value.fromString(uri_),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  makeERC1155(uri_: string): Address {
    let result = super.call("makeERC1155", "makeERC1155(string):(address)", [
      ethereum.Value.fromString(uri_),
    ]);

    return result[0].toAddress();
  }

  try_makeERC1155(uri_: string): ethereum.CallResult<Address> {
    let result = super.tryCall("makeERC1155", "makeERC1155(string):(address)", [
      ethereum.Value.fromString(uri_),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  makeERC721(name_: string, symbol_: string, uri_: string): Address {
    let result = super.call(
      "makeERC721",
      "makeERC721(string,string,string):(address)",
      [
        ethereum.Value.fromString(name_),
        ethereum.Value.fromString(symbol_),
        ethereum.Value.fromString(uri_),
      ],
    );

    return result[0].toAddress();
  }

  try_makeERC721(
    name_: string,
    symbol_: string,
    uri_: string,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "makeERC721",
      "makeERC721(string,string,string):(address)",
      [
        ethereum.Value.fromString(name_),
        ethereum.Value.fromString(symbol_),
        ethereum.Value.fromString(uri_),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  makeGame(type_: string, name_: string, uri_: string): Address {
    let result = super.call(
      "makeGame",
      "makeGame(string,string,string):(address)",
      [
        ethereum.Value.fromString(type_),
        ethereum.Value.fromString(name_),
        ethereum.Value.fromString(uri_),
      ],
    );

    return result[0].toAddress();
  }

  try_makeGame(
    type_: string,
    name_: string,
    uri_: string,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "makeGame",
      "makeGame(string,string,string):(address)",
      [
        ethereum.Value.fromString(type_),
        ethereum.Value.fromString(name_),
        ethereum.Value.fromString(uri_),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  makeTask(type_: string, name_: string, uri_: string): Address {
    let result = super.call(
      "makeTask",
      "makeTask(string,string,string):(address)",
      [
        ethereum.Value.fromString(type_),
        ethereum.Value.fromString(name_),
        ethereum.Value.fromString(uri_),
      ],
    );

    return result[0].toAddress();
  }

  try_makeTask(
    type_: string,
    name_: string,
    uri_: string,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "makeTask",
      "makeTask(string,string,string):(address)",
      [
        ethereum.Value.fromString(type_),
        ethereum.Value.fromString(name_),
        ethereum.Value.fromString(uri_),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  mintForAccount(account: Address, tokenURI: string): BigInt {
    let result = super.call(
      "mintForAccount",
      "mintForAccount(address,string):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromString(tokenURI),
      ],
    );

    return result[0].toBigInt();
  }

  try_mintForAccount(
    account: Address,
    tokenURI: string,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "mintForAccount",
      "mintForAccount(address,string):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromString(tokenURI),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableUUID",
      "proxiableUUID():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  role(): string {
    let result = super.call("role", "role():(string)", []);

    return result[0].toString();
  }

  try_role(): ethereum.CallResult<string> {
    let result = super.tryCall("role", "role():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class AssocAddCall extends ethereum.Call {
  get inputs(): AssocAddCall__Inputs {
    return new AssocAddCall__Inputs(this);
  }

  get outputs(): AssocAddCall__Outputs {
    return new AssocAddCall__Outputs(this);
  }
}

export class AssocAddCall__Inputs {
  _call: AssocAddCall;

  constructor(call: AssocAddCall) {
    this._call = call;
  }

  get key(): string {
    return this._call.inputValues[0].value.toString();
  }

  get contractAddr(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AssocAddCall__Outputs {
  _call: AssocAddCall;

  constructor(call: AssocAddCall) {
    this._call = call;
  }
}

export class AssocRemoveCall extends ethereum.Call {
  get inputs(): AssocRemoveCall__Inputs {
    return new AssocRemoveCall__Inputs(this);
  }

  get outputs(): AssocRemoveCall__Outputs {
    return new AssocRemoveCall__Outputs(this);
  }
}

export class AssocRemoveCall__Inputs {
  _call: AssocRemoveCall;

  constructor(call: AssocRemoveCall) {
    this._call = call;
  }

  get key(): string {
    return this._call.inputValues[0].value.toString();
  }

  get contractAddr(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AssocRemoveCall__Outputs {
  _call: AssocRemoveCall;

  constructor(call: AssocRemoveCall) {
    this._call = call;
  }
}

export class AssocSetCall extends ethereum.Call {
  get inputs(): AssocSetCall__Inputs {
    return new AssocSetCall__Inputs(this);
  }

  get outputs(): AssocSetCall__Outputs {
    return new AssocSetCall__Outputs(this);
  }
}

export class AssocSetCall__Inputs {
  _call: AssocSetCall;

  constructor(call: AssocSetCall) {
    this._call = call;
  }

  get key(): string {
    return this._call.inputValues[0].value.toString();
  }

  get contractAddr(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AssocSetCall__Outputs {
  _call: AssocSetCall;

  constructor(call: AssocSetCall) {
    this._call = call;
  }
}

export class BeaconAddCall extends ethereum.Call {
  get inputs(): BeaconAddCall__Inputs {
    return new BeaconAddCall__Inputs(this);
  }

  get outputs(): BeaconAddCall__Outputs {
    return new BeaconAddCall__Outputs(this);
  }
}

export class BeaconAddCall__Inputs {
  _call: BeaconAddCall;

  constructor(call: BeaconAddCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get implementation(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class BeaconAddCall__Outputs {
  _call: BeaconAddCall;

  constructor(call: BeaconAddCall) {
    this._call = call;
  }
}

export class HubChangeCall extends ethereum.Call {
  get inputs(): HubChangeCall__Inputs {
    return new HubChangeCall__Inputs(this);
  }

  get outputs(): HubChangeCall__Outputs {
    return new HubChangeCall__Outputs(this);
  }
}

export class HubChangeCall__Inputs {
  _call: HubChangeCall;

  constructor(call: HubChangeCall) {
    this._call = call;
  }

  get newHubAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class HubChangeCall__Outputs {
  _call: HubChangeCall;

  constructor(call: HubChangeCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get openRepo(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get gameContract(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get claimContract(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get taskContract(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MakeClaimCall extends ethereum.Call {
  get inputs(): MakeClaimCall__Inputs {
    return new MakeClaimCall__Inputs(this);
  }

  get outputs(): MakeClaimCall__Outputs {
    return new MakeClaimCall__Outputs(this);
  }
}

export class MakeClaimCall__Inputs {
  _call: MakeClaimCall;

  constructor(call: MakeClaimCall) {
    this._call = call;
  }

  get type_(): string {
    return this._call.inputValues[0].value.toString();
  }

  get name_(): string {
    return this._call.inputValues[1].value.toString();
  }

  get uri_(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class MakeClaimCall__Outputs {
  _call: MakeClaimCall;

  constructor(call: MakeClaimCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class MakeERC1155Call extends ethereum.Call {
  get inputs(): MakeERC1155Call__Inputs {
    return new MakeERC1155Call__Inputs(this);
  }

  get outputs(): MakeERC1155Call__Outputs {
    return new MakeERC1155Call__Outputs(this);
  }
}

export class MakeERC1155Call__Inputs {
  _call: MakeERC1155Call;

  constructor(call: MakeERC1155Call) {
    this._call = call;
  }

  get uri_(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class MakeERC1155Call__Outputs {
  _call: MakeERC1155Call;

  constructor(call: MakeERC1155Call) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class MakeERC721Call extends ethereum.Call {
  get inputs(): MakeERC721Call__Inputs {
    return new MakeERC721Call__Inputs(this);
  }

  get outputs(): MakeERC721Call__Outputs {
    return new MakeERC721Call__Outputs(this);
  }
}

export class MakeERC721Call__Inputs {
  _call: MakeERC721Call;

  constructor(call: MakeERC721Call) {
    this._call = call;
  }

  get name_(): string {
    return this._call.inputValues[0].value.toString();
  }

  get symbol_(): string {
    return this._call.inputValues[1].value.toString();
  }

  get uri_(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class MakeERC721Call__Outputs {
  _call: MakeERC721Call;

  constructor(call: MakeERC721Call) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class MakeGameCall extends ethereum.Call {
  get inputs(): MakeGameCall__Inputs {
    return new MakeGameCall__Inputs(this);
  }

  get outputs(): MakeGameCall__Outputs {
    return new MakeGameCall__Outputs(this);
  }
}

export class MakeGameCall__Inputs {
  _call: MakeGameCall;

  constructor(call: MakeGameCall) {
    this._call = call;
  }

  get type_(): string {
    return this._call.inputValues[0].value.toString();
  }

  get name_(): string {
    return this._call.inputValues[1].value.toString();
  }

  get uri_(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class MakeGameCall__Outputs {
  _call: MakeGameCall;

  constructor(call: MakeGameCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class MakeTaskCall extends ethereum.Call {
  get inputs(): MakeTaskCall__Inputs {
    return new MakeTaskCall__Inputs(this);
  }

  get outputs(): MakeTaskCall__Outputs {
    return new MakeTaskCall__Outputs(this);
  }
}

export class MakeTaskCall__Inputs {
  _call: MakeTaskCall;

  constructor(call: MakeTaskCall) {
    this._call = call;
  }

  get type_(): string {
    return this._call.inputValues[0].value.toString();
  }

  get name_(): string {
    return this._call.inputValues[1].value.toString();
  }

  get uri_(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class MakeTaskCall__Outputs {
  _call: MakeTaskCall;

  constructor(call: MakeTaskCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class MintForAccountCall extends ethereum.Call {
  get inputs(): MintForAccountCall__Inputs {
    return new MintForAccountCall__Inputs(this);
  }

  get outputs(): MintForAccountCall__Outputs {
    return new MintForAccountCall__Outputs(this);
  }
}

export class MintForAccountCall__Inputs {
  _call: MintForAccountCall;

  constructor(call: MintForAccountCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenURI(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class MintForAccountCall__Outputs {
  _call: MintForAccountCall;

  constructor(call: MintForAccountCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpgradeImplementationCall extends ethereum.Call {
  get inputs(): UpgradeImplementationCall__Inputs {
    return new UpgradeImplementationCall__Inputs(this);
  }

  get outputs(): UpgradeImplementationCall__Outputs {
    return new UpgradeImplementationCall__Outputs(this);
  }
}

export class UpgradeImplementationCall__Inputs {
  _call: UpgradeImplementationCall;

  constructor(call: UpgradeImplementationCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get newImplementation(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class UpgradeImplementationCall__Outputs {
  _call: UpgradeImplementationCall;

  constructor(call: UpgradeImplementationCall) {
    this._call = call;
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}
