// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class EffectsExecuted extends ethereum.Event {
  get params(): EffectsExecuted__Params {
    return new EffectsExecuted__Params(this);
  }
}

export class EffectsExecuted__Params {
  _event: EffectsExecuted;

  constructor(event: EffectsExecuted) {
    this._event = event;
  }

  get targetTokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get ruleId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get data(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class EventConfirmed extends ethereum.Event {
  get params(): EventConfirmed__Params {
    return new EventConfirmed__Params(this);
  }
}

export class EventConfirmed__Params {
  _event: EventConfirmed;

  constructor(event: EventConfirmed) {
    this._event = event;
  }

  get ruleId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get uri(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class GUIDCreated extends ethereum.Event {
  get params(): GUIDCreated__Params {
    return new GUIDCreated__Params(this);
  }
}

export class GUIDCreated__Params {
  _event: GUIDCreated;

  constructor(event: GUIDCreated) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get guid(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class GUIDURIChange extends ethereum.Event {
  get params(): GUIDURIChange__Params {
    return new GUIDURIChange__Params(this);
  }
}

export class GUIDURIChange__Params {
  _event: GUIDURIChange;

  constructor(event: GUIDURIChange) {
    this._event = event;
  }

  get value(): string {
    return this._event.parameters[0].value.toString();
  }

  get guid(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class Nominate extends ethereum.Event {
  get params(): Nominate__Params {
    return new Nominate__Params(this);
  }
}

export class Nominate__Params {
  _event: Nominate;

  constructor(event: Nominate) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get uri(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Post extends ethereum.Event {
  get params(): Post__Params {
    return new Post__Params(this);
  }
}

export class Post__Params {
  _event: Post;

  constructor(event: Post) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get entRole(): string {
    return this._event.parameters[2].value.toString();
  }

  get uri(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class RoleCreated extends ethereum.Event {
  get params(): RoleCreated__Params {
    return new RoleCreated__Params(this);
  }
}

export class RoleCreated__Params {
  _event: RoleCreated;

  constructor(event: RoleCreated) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get role(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class RoleURIChange extends ethereum.Event {
  get params(): RoleURIChange__Params {
    return new RoleURIChange__Params(this);
  }
}

export class RoleURIChange__Params {
  _event: RoleURIChange;

  constructor(event: RoleURIChange) {
    this._event = event;
  }

  get value(): string {
    return this._event.parameters[0].value.toString();
  }

  get role(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class TransferBatch extends ethereum.Event {
  get params(): TransferBatch__Params {
    return new TransferBatch__Params(this);
  }
}

export class TransferBatch__Params {
  _event: TransferBatch;

  constructor(event: TransferBatch) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get values(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class TransferBatchByToken extends ethereum.Event {
  get params(): TransferBatchByToken__Params {
    return new TransferBatchByToken__Params(this);
  }
}

export class TransferBatchByToken__Params {
  _event: TransferBatchByToken;

  constructor(event: TransferBatchByToken) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get fromOwnerToken(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get toOwnerToken(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get ids(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get values(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class TransferByToken extends ethereum.Event {
  get params(): TransferByToken__Params {
    return new TransferByToken__Params(this);
  }
}

export class TransferByToken__Params {
  _event: TransferByToken;

  constructor(event: TransferByToken) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get fromOwnerToken(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get toOwnerToken(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get id(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class TransferSingle extends ethereum.Event {
  get params(): TransferSingle__Params {
    return new TransferSingle__Params(this);
  }
}

export class TransferSingle__Params {
  _event: TransferSingle;

  constructor(event: TransferSingle) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class URI extends ethereum.Event {
  get params(): URI__Params {
    return new URI__Params(this);
  }
}

export class URI__Params {
  _event: URI;

  constructor(event: URI) {
    this._event = event;
  }

  get value(): string {
    return this._event.parameters[0].value.toString();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ERC20PaymentReleased extends ethereum.Event {
  get params(): ERC20PaymentReleased__Params {
    return new ERC20PaymentReleased__Params(this);
  }
}

export class ERC20PaymentReleased__Params {
  _event: ERC20PaymentReleased;

  constructor(event: ERC20PaymentReleased) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class FundsSent extends ethereum.Event {
  get params(): FundsSent__Params {
    return new FundsSent__Params(this);
  }
}

export class FundsSent__Params {
  _event: FundsSent;

  constructor(event: FundsSent) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get token(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class PaymentReceived extends ethereum.Event {
  get params(): PaymentReceived__Params {
    return new PaymentReceived__Params(this);
  }
}

export class PaymentReceived__Params {
  _event: PaymentReceived;

  constructor(event: PaymentReceived) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class PaymentReleased extends ethereum.Event {
  get params(): PaymentReleased__Params {
    return new PaymentReleased__Params(this);
  }
}

export class PaymentReleased__Params {
  _event: PaymentReleased;

  constructor(event: PaymentReleased) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class DelegateChanged extends ethereum.Event {
  get params(): DelegateChanged__Params {
    return new DelegateChanged__Params(this);
  }
}

export class DelegateChanged__Params {
  _event: DelegateChanged;

  constructor(event: DelegateChanged) {
    this._event = event;
  }

  get delegator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get fromDelegate(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get toDelegate(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class DelegateVotesChanged extends ethereum.Event {
  get params(): DelegateVotesChanged__Params {
    return new DelegateVotesChanged__Params(this);
  }
}

export class DelegateVotesChanged__Params {
  _event: DelegateVotesChanged;

  constructor(event: DelegateVotesChanged) {
    this._event = event;
  }

  get delegate(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get previousBalance(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newBalance(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Game__conditionsGetResultValue0Struct extends ethereum.Tuple {
  get repo(): string {
    return this[0].toString();
  }

  get id(): Bytes {
    return this[1].toBytes();
  }
}

export class Game__confirmationGetResultValue0Struct extends ethereum.Tuple {
  get ruling(): string {
    return this[0].toString();
  }

  get evidence(): boolean {
    return this[1].toBoolean();
  }

  get witness(): BigInt {
    return this[2].toBigInt();
  }
}

export class Game__effectsGetResultValue0Struct extends ethereum.Tuple {
  get domain(): string {
    return this[0].toString();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }

  get disabled(): boolean {
    return this[2].toBoolean();
  }
}

export class Game__ruleAddInputRuleStruct extends ethereum.Tuple {
  get about(): Bytes {
    return this[0].toBytes();
  }

  get affected(): string {
    return this[1].toString();
  }

  get negation(): boolean {
    return this[2].toBoolean();
  }

  get uri(): string {
    return this[3].toString();
  }

  get disabled(): boolean {
    return this[4].toBoolean();
  }
}

export class Game__ruleAddInputEffectsStruct extends ethereum.Tuple {
  get domain(): string {
    return this[0].toString();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }

  get disabled(): boolean {
    return this[2].toBoolean();
  }
}

export class Game__ruleAddInputConfirmationStruct extends ethereum.Tuple {
  get ruling(): string {
    return this[0].toString();
  }

  get evidence(): boolean {
    return this[1].toBoolean();
  }

  get witness(): BigInt {
    return this[2].toBigInt();
  }
}

export class Game__ruleGetResultValue0Struct extends ethereum.Tuple {
  get about(): Bytes {
    return this[0].toBytes();
  }

  get affected(): string {
    return this[1].toString();
  }

  get negation(): boolean {
    return this[2].toBoolean();
  }

  get uri(): string {
    return this[3].toString();
  }

  get disabled(): boolean {
    return this[4].toBoolean();
  }
}

export class Game__ruleAdd1InputRuleStruct extends ethereum.Tuple {
  get about(): Bytes {
    return this[0].toBytes();
  }

  get affected(): string {
    return this[1].toString();
  }

  get negation(): boolean {
    return this[2].toBoolean();
  }

  get uri(): string {
    return this[3].toString();
  }

  get disabled(): boolean {
    return this[4].toBoolean();
  }
}

export class Game__ruleAdd1InputConfirmationStruct extends ethereum.Tuple {
  get ruling(): string {
    return this[0].toString();
  }

  get evidence(): boolean {
    return this[1].toBoolean();
  }

  get witness(): BigInt {
    return this[2].toBigInt();
  }
}

export class Game__ruleAdd1InputEffectsStruct extends ethereum.Tuple {
  get domain(): string {
    return this[0].toString();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }

  get disabled(): boolean {
    return this[2].toBoolean();
  }
}

export class Game__caseMakeInputRulesStruct extends ethereum.Tuple {
  get game(): Address {
    return this[0].toAddress();
  }

  get ruleId(): BigInt {
    return this[1].toBigInt();
  }
}

export class Game__caseMakeInputAssignRolesStruct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get role(): string {
    return this[1].toString();
  }
}

export class Game__caseMakeInputPostsStruct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get entRole(): string {
    return this[1].toString();
  }

  get uri(): string {
    return this[2].toString();
  }
}

export class Game__caseMakeClosedInputRulesStruct extends ethereum.Tuple {
  get game(): Address {
    return this[0].toAddress();
  }

  get ruleId(): BigInt {
    return this[1].toBigInt();
  }
}

export class Game__caseMakeClosedInputAssignRolesStruct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get role(): string {
    return this[1].toString();
  }
}

export class Game__caseMakeClosedInputPostsStruct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get entRole(): string {
    return this[1].toString();
  }

  get uri(): string {
    return this[2].toString();
  }
}

export class Game__caseMakeOpenInputRulesStruct extends ethereum.Tuple {
  get game(): Address {
    return this[0].toAddress();
  }

  get ruleId(): BigInt {
    return this[1].toBigInt();
  }
}

export class Game__caseMakeOpenInputAssignRolesStruct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get role(): string {
    return this[1].toString();
  }
}

export class Game__caseMakeOpenInputPostsStruct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get entRole(): string {
    return this[1].toString();
  }

  get uri(): string {
    return this[2].toString();
  }
}

export class Game extends ethereum.SmartContract {
  static bind(address: Address): Game {
    return new Game("Game", address);
  }

  GUIDHas(account: Address, guid: Bytes): boolean {
    let result = super.call("GUIDHas", "GUIDHas(address,bytes32):(bool)", [
      ethereum.Value.fromAddress(account),
      ethereum.Value.fromFixedBytes(guid),
    ]);

    return result[0].toBoolean();
  }

  try_GUIDHas(account: Address, guid: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall("GUIDHas", "GUIDHas(address,bytes32):(bool)", [
      ethereum.Value.fromAddress(account),
      ethereum.Value.fromFixedBytes(guid),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  GUIDHasByToken(soulToken: BigInt, guid: Bytes): boolean {
    let result = super.call(
      "GUIDHasByToken",
      "GUIDHasByToken(uint256,bytes32):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(soulToken),
        ethereum.Value.fromFixedBytes(guid),
      ],
    );

    return result[0].toBoolean();
  }

  try_GUIDHasByToken(
    soulToken: BigInt,
    guid: Bytes,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "GUIDHasByToken",
      "GUIDHasByToken(uint256,bytes32):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(soulToken),
        ethereum.Value.fromFixedBytes(guid),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  GUIDURI(guid: Bytes): string {
    let result = super.call("GUIDURI", "GUIDURI(bytes32):(string)", [
      ethereum.Value.fromFixedBytes(guid),
    ]);

    return result[0].toString();
  }

  try_GUIDURI(guid: Bytes): ethereum.CallResult<string> {
    let result = super.tryCall("GUIDURI", "GUIDURI(bytes32):(string)", [
      ethereum.Value.fromFixedBytes(guid),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  balanceOf(account: Address, id: BigInt): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id),
      ],
    );

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address, id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfBatch(accounts: Array<Address>, ids: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids),
      ],
    );

    return result[0].toBigIntArray();
  }

  try_balanceOfBatch(
    accounts: Array<Address>,
    ids: Array<BigInt>,
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  balanceOfToken(sbt: BigInt, id: BigInt): BigInt {
    let result = super.call(
      "balanceOfToken",
      "balanceOfToken(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(sbt),
        ethereum.Value.fromUnsignedBigInt(id),
      ],
    );

    return result[0].toBigInt();
  }

  try_balanceOfToken(sbt: BigInt, id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfToken",
      "balanceOfToken(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(sbt),
        ethereum.Value.fromUnsignedBigInt(id),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimHas(claimContract: Address): boolean {
    let result = super.call("claimHas", "claimHas(address):(bool)", [
      ethereum.Value.fromAddress(claimContract),
    ]);

    return result[0].toBoolean();
  }

  try_claimHas(claimContract: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("claimHas", "claimHas(address):(bool)", [
      ethereum.Value.fromAddress(claimContract),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  conditionsGet(ruleId: BigInt): Array<Game__conditionsGetResultValue0Struct> {
    let result = super.call(
      "conditionsGet",
      "conditionsGet(uint256):((string,bytes32)[])",
      [ethereum.Value.fromUnsignedBigInt(ruleId)],
    );

    return result[0].toTupleArray<Game__conditionsGetResultValue0Struct>();
  }

  try_conditionsGet(
    ruleId: BigInt,
  ): ethereum.CallResult<Array<Game__conditionsGetResultValue0Struct>> {
    let result = super.tryCall(
      "conditionsGet",
      "conditionsGet(uint256):((string,bytes32)[])",
      [ethereum.Value.fromUnsignedBigInt(ruleId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Game__conditionsGetResultValue0Struct>(),
    );
  }

  confGet(key: string): string {
    let result = super.call("confGet", "confGet(string):(string)", [
      ethereum.Value.fromString(key),
    ]);

    return result[0].toString();
  }

  try_confGet(key: string): ethereum.CallResult<string> {
    let result = super.tryCall("confGet", "confGet(string):(string)", [
      ethereum.Value.fromString(key),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  confirmationGet(id: BigInt): Game__confirmationGetResultValue0Struct {
    let result = super.call(
      "confirmationGet",
      "confirmationGet(uint256):((string,bool,uint256))",
      [ethereum.Value.fromUnsignedBigInt(id)],
    );

    return changetype<Game__confirmationGetResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_confirmationGet(
    id: BigInt,
  ): ethereum.CallResult<Game__confirmationGetResultValue0Struct> {
    let result = super.tryCall(
      "confirmationGet",
      "confirmationGet(uint256):((string,bool,uint256))",
      [ethereum.Value.fromUnsignedBigInt(id)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Game__confirmationGetResultValue0Struct>(value[0].toTuple()),
    );
  }

  contractURI(): string {
    let result = super.call("contractURI", "contractURI():(string)", []);

    return result[0].toString();
  }

  try_contractURI(): ethereum.CallResult<string> {
    let result = super.tryCall("contractURI", "contractURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  effectsGet(ruleId: BigInt): Array<Game__effectsGetResultValue0Struct> {
    let result = super.call(
      "effectsGet",
      "effectsGet(uint256):((string,int256,bool)[])",
      [ethereum.Value.fromUnsignedBigInt(ruleId)],
    );

    return result[0].toTupleArray<Game__effectsGetResultValue0Struct>();
  }

  try_effectsGet(
    ruleId: BigInt,
  ): ethereum.CallResult<Array<Game__effectsGetResultValue0Struct>> {
    let result = super.tryCall(
      "effectsGet",
      "effectsGet(uint256):((string,int256,bool)[])",
      [ethereum.Value.fromUnsignedBigInt(ruleId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Game__effectsGetResultValue0Struct>(),
    );
  }

  getCurrentSBT(): BigInt {
    let result = super.call("getCurrentSBT", "getCurrentSBT():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getCurrentSBT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentSBT",
      "getCurrentSBT():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getExtTokenId(account: Address): BigInt {
    let result = super.call(
      "getExtTokenId",
      "getExtTokenId(address):(uint256)",
      [ethereum.Value.fromAddress(account)],
    );

    return result[0].toBigInt();
  }

  try_getExtTokenId(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getExtTokenId",
      "getExtTokenId(address):(uint256)",
      [ethereum.Value.fromAddress(account)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getHub(): Address {
    let result = super.call("getHub", "getHub():(address)", []);

    return result[0].toAddress();
  }

  try_getHub(): ethereum.CallResult<Address> {
    let result = super.tryCall("getHub", "getHub():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRepoAddr(): Address {
    let result = super.call("getRepoAddr", "getRepoAddr():(address)", []);

    return result[0].toAddress();
  }

  try_getRepoAddr(): ethereum.CallResult<Address> {
    let result = super.tryCall("getRepoAddr", "getRepoAddr():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getTargetContract(): Address {
    let result = super.call(
      "getTargetContract",
      "getTargetContract():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_getTargetContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getTargetContract",
      "getTargetContract():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isApprovedForAll(account: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator),
      ],
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    account: Address,
    operator: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  join(): BigInt {
    let result = super.call("join", "join():(uint256)", []);

    return result[0].toBigInt();
  }

  try_join(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("join", "join():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  leave(): BigInt {
    let result = super.call("leave", "leave():(uint256)", []);

    return result[0].toBigInt();
  }

  try_leave(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("leave", "leave():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  roleExist(role: string): boolean {
    let result = super.call("roleExist", "roleExist(string):(bool)", [
      ethereum.Value.fromString(role),
    ]);

    return result[0].toBoolean();
  }

  try_roleExist(role: string): ethereum.CallResult<boolean> {
    let result = super.tryCall("roleExist", "roleExist(string):(bool)", [
      ethereum.Value.fromString(role),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  roleHas(account: Address, role: string): boolean {
    let result = super.call("roleHas", "roleHas(address,string):(bool)", [
      ethereum.Value.fromAddress(account),
      ethereum.Value.fromString(role),
    ]);

    return result[0].toBoolean();
  }

  try_roleHas(account: Address, role: string): ethereum.CallResult<boolean> {
    let result = super.tryCall("roleHas", "roleHas(address,string):(bool)", [
      ethereum.Value.fromAddress(account),
      ethereum.Value.fromString(role),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  roleHasByToken(soulToken: BigInt, role: string): boolean {
    let result = super.call(
      "roleHasByToken",
      "roleHasByToken(uint256,string):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(soulToken),
        ethereum.Value.fromString(role),
      ],
    );

    return result[0].toBoolean();
  }

  try_roleHasByToken(
    soulToken: BigInt,
    role: string,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "roleHasByToken",
      "roleHasByToken(uint256,string):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(soulToken),
        ethereum.Value.fromString(role),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  roleToId(role: string): BigInt {
    let result = super.call("roleToId", "roleToId(string):(uint256)", [
      ethereum.Value.fromString(role),
    ]);

    return result[0].toBigInt();
  }

  try_roleToId(role: string): ethereum.CallResult<BigInt> {
    let result = super.tryCall("roleToId", "roleToId(string):(uint256)", [
      ethereum.Value.fromString(role),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  roleURI(role: string): string {
    let result = super.call("roleURI", "roleURI(string):(string)", [
      ethereum.Value.fromString(role),
    ]);

    return result[0].toString();
  }

  try_roleURI(role: string): ethereum.CallResult<string> {
    let result = super.tryCall("roleURI", "roleURI(string):(string)", [
      ethereum.Value.fromString(role),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  rolesHas(account: Address, roles: Array<string>): boolean {
    let result = super.call("rolesHas", "rolesHas(address,string[]):(bool)", [
      ethereum.Value.fromAddress(account),
      ethereum.Value.fromStringArray(roles),
    ]);

    return result[0].toBoolean();
  }

  try_rolesHas(
    account: Address,
    roles: Array<string>,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "rolesHas",
      "rolesHas(address,string[]):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromStringArray(roles),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  ruleAdd(
    rule: Game__ruleAddInputRuleStruct,
    effects: Array<Game__ruleAddInputEffectsStruct>,
    confirmation: Game__ruleAddInputConfirmationStruct,
  ): BigInt {
    let result = super.call(
      "ruleAdd",
      "ruleAdd((bytes32,string,bool,string,bool),(string,int256,bool)[],(string,bool,uint256)):(uint256)",
      [
        ethereum.Value.fromTuple(rule),
        ethereum.Value.fromTupleArray(effects),
        ethereum.Value.fromTuple(confirmation),
      ],
    );

    return result[0].toBigInt();
  }

  try_ruleAdd(
    rule: Game__ruleAddInputRuleStruct,
    effects: Array<Game__ruleAddInputEffectsStruct>,
    confirmation: Game__ruleAddInputConfirmationStruct,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ruleAdd",
      "ruleAdd((bytes32,string,bool,string,bool),(string,int256,bool)[],(string,bool,uint256)):(uint256)",
      [
        ethereum.Value.fromTuple(rule),
        ethereum.Value.fromTupleArray(effects),
        ethereum.Value.fromTuple(confirmation),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ruleGet(ruleId: BigInt): Game__ruleGetResultValue0Struct {
    let result = super.call(
      "ruleGet",
      "ruleGet(uint256):((bytes32,string,bool,string,bool))",
      [ethereum.Value.fromUnsignedBigInt(ruleId)],
    );

    return changetype<Game__ruleGetResultValue0Struct>(result[0].toTuple());
  }

  try_ruleGet(
    ruleId: BigInt,
  ): ethereum.CallResult<Game__ruleGetResultValue0Struct> {
    let result = super.tryCall(
      "ruleGet",
      "ruleGet(uint256):((bytes32,string,bool,string,bool))",
      [ethereum.Value.fromUnsignedBigInt(ruleId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Game__ruleGetResultValue0Struct>(value[0].toTuple()),
    );
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  uniqueMembers(id: BigInt): Array<BigInt> {
    let result = super.call(
      "uniqueMembers",
      "uniqueMembers(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(id)],
    );

    return result[0].toBigIntArray();
  }

  try_uniqueMembers(id: BigInt): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "uniqueMembers",
      "uniqueMembers(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(id)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  uniqueMembersCount(id: BigInt): BigInt {
    let result = super.call(
      "uniqueMembersCount",
      "uniqueMembersCount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)],
    );

    return result[0].toBigInt();
  }

  try_uniqueMembersCount(id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "uniqueMembersCount",
      "uniqueMembersCount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  uniqueRoleMembers(role: string): Array<BigInt> {
    let result = super.call(
      "uniqueRoleMembers",
      "uniqueRoleMembers(string):(uint256[])",
      [ethereum.Value.fromString(role)],
    );

    return result[0].toBigIntArray();
  }

  try_uniqueRoleMembers(role: string): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "uniqueRoleMembers",
      "uniqueRoleMembers(string):(uint256[])",
      [ethereum.Value.fromString(role)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  uniqueRoleMembersCount(role: string): BigInt {
    let result = super.call(
      "uniqueRoleMembersCount",
      "uniqueRoleMembersCount(string):(uint256)",
      [ethereum.Value.fromString(role)],
    );

    return result[0].toBigInt();
  }

  try_uniqueRoleMembersCount(role: string): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "uniqueRoleMembersCount",
      "uniqueRoleMembersCount(string):(uint256)",
      [ethereum.Value.fromString(role)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  uri(token_id: BigInt): string {
    let result = super.call("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(token_id),
    ]);

    return result[0].toString();
  }

  try_uri(token_id: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(token_id),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  hub(): Address {
    let result = super.call("hub", "hub():(address)", []);

    return result[0].toAddress();
  }

  try_hub(): ethereum.CallResult<Address> {
    let result = super.tryCall("hub", "hub():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  test(): string {
    let result = super.call("test", "test():(string)", []);

    return result[0].toString();
  }

  try_test(): ethereum.CallResult<string> {
    let result = super.tryCall("test", "test():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  ruleAdd1(
    rule: Game__ruleAdd1InputRuleStruct,
    confirmation: Game__ruleAdd1InputConfirmationStruct,
    effects: Array<Game__ruleAdd1InputEffectsStruct>,
  ): BigInt {
    let result = super.call(
      "ruleAdd",
      "ruleAdd((bytes32,string,bool,string,bool),(string,bool,uint256),(string,int256,bool)[]):(uint256)",
      [
        ethereum.Value.fromTuple(rule),
        ethereum.Value.fromTuple(confirmation),
        ethereum.Value.fromTupleArray(effects),
      ],
    );

    return result[0].toBigInt();
  }

  try_ruleAdd1(
    rule: Game__ruleAdd1InputRuleStruct,
    confirmation: Game__ruleAdd1InputConfirmationStruct,
    effects: Array<Game__ruleAdd1InputEffectsStruct>,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ruleAdd",
      "ruleAdd((bytes32,string,bool,string,bool),(string,bool,uint256),(string,int256,bool)[]):(uint256)",
      [
        ethereum.Value.fromTuple(rule),
        ethereum.Value.fromTuple(confirmation),
        ethereum.Value.fromTupleArray(effects),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  contractBalance(token: Address): BigInt {
    let result = super.call(
      "contractBalance",
      "contractBalance(address):(uint256)",
      [ethereum.Value.fromAddress(token)],
    );

    return result[0].toBigInt();
  }

  try_contractBalance(token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "contractBalance",
      "contractBalance(address):(uint256)",
      [ethereum.Value.fromAddress(token)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  delegates(account: Address): Address {
    let result = super.call("delegates", "delegates(address):(address)", [
      ethereum.Value.fromAddress(account),
    ]);

    return result[0].toAddress();
  }

  try_delegates(account: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("delegates", "delegates(address):(address)", [
      ethereum.Value.fromAddress(account),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPastTotalSupply(blockNumber: BigInt): BigInt {
    let result = super.call(
      "getPastTotalSupply",
      "getPastTotalSupply(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(blockNumber)],
    );

    return result[0].toBigInt();
  }

  try_getPastTotalSupply(blockNumber: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPastTotalSupply",
      "getPastTotalSupply(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(blockNumber)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPastVotes(account: Address, blockNumber: BigInt): BigInt {
    let result = super.call(
      "getPastVotes",
      "getPastVotes(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(blockNumber),
      ],
    );

    return result[0].toBigInt();
  }

  try_getPastVotes(
    account: Address,
    blockNumber: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPastVotes",
      "getPastVotes(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(blockNumber),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVotes(account: Address): BigInt {
    let result = super.call("getVotes", "getVotes(address):(uint256)", [
      ethereum.Value.fromAddress(account),
    ]);

    return result[0].toBigInt();
  }

  try_getVotes(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getVotes", "getVotes(address):(uint256)", [
      ethereum.Value.fromAddress(account),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  votesRepoAddr(): Address {
    let result = super.call("votesRepoAddr", "votesRepoAddr():(address)", []);

    return result[0].toAddress();
  }

  try_votesRepoAddr(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "votesRepoAddr",
      "votesRepoAddr():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  caseMake(
    name_: string,
    uri_: string,
    rules: Array<Game__caseMakeInputRulesStruct>,
    assignRoles: Array<Game__caseMakeInputAssignRolesStruct>,
    posts: Array<Game__caseMakeInputPostsStruct>,
  ): Address {
    let result = super.call(
      "caseMake",
      "caseMake(string,string,(address,uint256)[],(uint256,string)[],(uint256,string,string)[]):(address)",
      [
        ethereum.Value.fromString(name_),
        ethereum.Value.fromString(uri_),
        ethereum.Value.fromTupleArray(rules),
        ethereum.Value.fromTupleArray(assignRoles),
        ethereum.Value.fromTupleArray(posts),
      ],
    );

    return result[0].toAddress();
  }

  try_caseMake(
    name_: string,
    uri_: string,
    rules: Array<Game__caseMakeInputRulesStruct>,
    assignRoles: Array<Game__caseMakeInputAssignRolesStruct>,
    posts: Array<Game__caseMakeInputPostsStruct>,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "caseMake",
      "caseMake(string,string,(address,uint256)[],(uint256,string)[],(uint256,string,string)[]):(address)",
      [
        ethereum.Value.fromString(name_),
        ethereum.Value.fromString(uri_),
        ethereum.Value.fromTupleArray(rules),
        ethereum.Value.fromTupleArray(assignRoles),
        ethereum.Value.fromTupleArray(posts),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  caseMakeClosed(
    name_: string,
    uri_: string,
    rules: Array<Game__caseMakeClosedInputRulesStruct>,
    assignRoles: Array<Game__caseMakeClosedInputAssignRolesStruct>,
    posts: Array<Game__caseMakeClosedInputPostsStruct>,
    decisionURI_: string,
  ): Address {
    let result = super.call(
      "caseMakeClosed",
      "caseMakeClosed(string,string,(address,uint256)[],(uint256,string)[],(uint256,string,string)[],string):(address)",
      [
        ethereum.Value.fromString(name_),
        ethereum.Value.fromString(uri_),
        ethereum.Value.fromTupleArray(rules),
        ethereum.Value.fromTupleArray(assignRoles),
        ethereum.Value.fromTupleArray(posts),
        ethereum.Value.fromString(decisionURI_),
      ],
    );

    return result[0].toAddress();
  }

  try_caseMakeClosed(
    name_: string,
    uri_: string,
    rules: Array<Game__caseMakeClosedInputRulesStruct>,
    assignRoles: Array<Game__caseMakeClosedInputAssignRolesStruct>,
    posts: Array<Game__caseMakeClosedInputPostsStruct>,
    decisionURI_: string,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "caseMakeClosed",
      "caseMakeClosed(string,string,(address,uint256)[],(uint256,string)[],(uint256,string,string)[],string):(address)",
      [
        ethereum.Value.fromString(name_),
        ethereum.Value.fromString(uri_),
        ethereum.Value.fromTupleArray(rules),
        ethereum.Value.fromTupleArray(assignRoles),
        ethereum.Value.fromTupleArray(posts),
        ethereum.Value.fromString(decisionURI_),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  caseMakeOpen(
    name_: string,
    uri_: string,
    rules: Array<Game__caseMakeOpenInputRulesStruct>,
    assignRoles: Array<Game__caseMakeOpenInputAssignRolesStruct>,
    posts: Array<Game__caseMakeOpenInputPostsStruct>,
  ): Address {
    let result = super.call(
      "caseMakeOpen",
      "caseMakeOpen(string,string,(address,uint256)[],(uint256,string)[],(uint256,string,string)[]):(address)",
      [
        ethereum.Value.fromString(name_),
        ethereum.Value.fromString(uri_),
        ethereum.Value.fromTupleArray(rules),
        ethereum.Value.fromTupleArray(assignRoles),
        ethereum.Value.fromTupleArray(posts),
      ],
    );

    return result[0].toAddress();
  }

  try_caseMakeOpen(
    name_: string,
    uri_: string,
    rules: Array<Game__caseMakeOpenInputRulesStruct>,
    assignRoles: Array<Game__caseMakeOpenInputAssignRolesStruct>,
    posts: Array<Game__caseMakeOpenInputPostsStruct>,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "caseMakeOpen",
      "caseMakeOpen(string,string,(address,uint256)[],(uint256,string)[],(uint256,string,string)[]):(address)",
      [
        ethereum.Value.fromString(name_),
        ethereum.Value.fromString(uri_),
        ethereum.Value.fromTupleArray(rules),
        ethereum.Value.fromTupleArray(assignRoles),
        ethereum.Value.fromTupleArray(posts),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ClaimDisableCall extends ethereum.Call {
  get inputs(): ClaimDisableCall__Inputs {
    return new ClaimDisableCall__Inputs(this);
  }

  get outputs(): ClaimDisableCall__Outputs {
    return new ClaimDisableCall__Outputs(this);
  }
}

export class ClaimDisableCall__Inputs {
  _call: ClaimDisableCall;

  constructor(call: ClaimDisableCall) {
    this._call = call;
  }

  get claimContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ClaimDisableCall__Outputs {
  _call: ClaimDisableCall;

  constructor(call: ClaimDisableCall) {
    this._call = call;
  }
}

export class ConfSetCall extends ethereum.Call {
  get inputs(): ConfSetCall__Inputs {
    return new ConfSetCall__Inputs(this);
  }

  get outputs(): ConfSetCall__Outputs {
    return new ConfSetCall__Outputs(this);
  }
}

export class ConfSetCall__Inputs {
  _call: ConfSetCall;

  constructor(call: ConfSetCall) {
    this._call = call;
  }

  get key(): string {
    return this._call.inputValues[0].value.toString();
  }

  get value(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class ConfSetCall__Outputs {
  _call: ConfSetCall;

  constructor(call: ConfSetCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get sbtAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class Initialize1Call extends ethereum.Call {
  get inputs(): Initialize1Call__Inputs {
    return new Initialize1Call__Inputs(this);
  }

  get outputs(): Initialize1Call__Outputs {
    return new Initialize1Call__Outputs(this);
  }
}

export class Initialize1Call__Inputs {
  _call: Initialize1Call;

  constructor(call: Initialize1Call) {
    this._call = call;
  }

  get name_(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class Initialize1Call__Outputs {
  _call: Initialize1Call;

  constructor(call: Initialize1Call) {
    this._call = call;
  }
}

export class JoinCall extends ethereum.Call {
  get inputs(): JoinCall__Inputs {
    return new JoinCall__Inputs(this);
  }

  get outputs(): JoinCall__Outputs {
    return new JoinCall__Outputs(this);
  }
}

export class JoinCall__Inputs {
  _call: JoinCall;

  constructor(call: JoinCall) {
    this._call = call;
  }
}

export class JoinCall__Outputs {
  _call: JoinCall;

  constructor(call: JoinCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class LeaveCall extends ethereum.Call {
  get inputs(): LeaveCall__Inputs {
    return new LeaveCall__Inputs(this);
  }

  get outputs(): LeaveCall__Outputs {
    return new LeaveCall__Outputs(this);
  }
}

export class LeaveCall__Inputs {
  _call: LeaveCall;

  constructor(call: LeaveCall) {
    this._call = call;
  }
}

export class LeaveCall__Outputs {
  _call: LeaveCall;

  constructor(call: LeaveCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class NominateCall extends ethereum.Call {
  get inputs(): NominateCall__Inputs {
    return new NominateCall__Inputs(this);
  }

  get outputs(): NominateCall__Outputs {
    return new NominateCall__Outputs(this);
  }
}

export class NominateCall__Inputs {
  _call: NominateCall;

  constructor(call: NominateCall) {
    this._call = call;
  }

  get soulToken(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get uri_(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class NominateCall__Outputs {
  _call: NominateCall;

  constructor(call: NominateCall) {
    this._call = call;
  }
}

export class OnClaimConfirmedCall extends ethereum.Call {
  get inputs(): OnClaimConfirmedCall__Inputs {
    return new OnClaimConfirmedCall__Inputs(this);
  }

  get outputs(): OnClaimConfirmedCall__Outputs {
    return new OnClaimConfirmedCall__Outputs(this);
  }
}

export class OnClaimConfirmedCall__Inputs {
  _call: OnClaimConfirmedCall;

  constructor(call: OnClaimConfirmedCall) {
    this._call = call;
  }

  get ruleId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get targetContract(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get targetTokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class OnClaimConfirmedCall__Outputs {
  _call: OnClaimConfirmedCall;

  constructor(call: OnClaimConfirmedCall) {
    this._call = call;
  }
}

export class PostCall extends ethereum.Call {
  get inputs(): PostCall__Inputs {
    return new PostCall__Inputs(this);
  }

  get outputs(): PostCall__Outputs {
    return new PostCall__Outputs(this);
  }
}

export class PostCall__Inputs {
  _call: PostCall;

  constructor(call: PostCall) {
    this._call = call;
  }

  get entRole(): string {
    return this._call.inputValues[0].value.toString();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get uri_(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class PostCall__Outputs {
  _call: PostCall;

  constructor(call: PostCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class ReportEventCall extends ethereum.Call {
  get inputs(): ReportEventCall__Inputs {
    return new ReportEventCall__Inputs(this);
  }

  get outputs(): ReportEventCall__Outputs {
    return new ReportEventCall__Outputs(this);
  }
}

export class ReportEventCall__Inputs {
  _call: ReportEventCall;

  constructor(call: ReportEventCall) {
    this._call = call;
  }

  get ruleId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get detailsURI(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class ReportEventCall__Outputs {
  _call: ReportEventCall;

  constructor(call: ReportEventCall) {
    this._call = call;
  }
}

export class RoleAssignCall extends ethereum.Call {
  get inputs(): RoleAssignCall__Inputs {
    return new RoleAssignCall__Inputs(this);
  }

  get outputs(): RoleAssignCall__Outputs {
    return new RoleAssignCall__Outputs(this);
  }
}

export class RoleAssignCall__Inputs {
  _call: RoleAssignCall;

  constructor(call: RoleAssignCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get role(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class RoleAssignCall__Outputs {
  _call: RoleAssignCall;

  constructor(call: RoleAssignCall) {
    this._call = call;
  }
}

export class RoleAssignToTokenCall extends ethereum.Call {
  get inputs(): RoleAssignToTokenCall__Inputs {
    return new RoleAssignToTokenCall__Inputs(this);
  }

  get outputs(): RoleAssignToTokenCall__Outputs {
    return new RoleAssignToTokenCall__Outputs(this);
  }
}

export class RoleAssignToTokenCall__Inputs {
  _call: RoleAssignToTokenCall;

  constructor(call: RoleAssignToTokenCall) {
    this._call = call;
  }

  get sbt(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get role(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class RoleAssignToTokenCall__Outputs {
  _call: RoleAssignToTokenCall;

  constructor(call: RoleAssignToTokenCall) {
    this._call = call;
  }
}

export class RoleChangeCall extends ethereum.Call {
  get inputs(): RoleChangeCall__Inputs {
    return new RoleChangeCall__Inputs(this);
  }

  get outputs(): RoleChangeCall__Outputs {
    return new RoleChangeCall__Outputs(this);
  }
}

export class RoleChangeCall__Inputs {
  _call: RoleChangeCall;

  constructor(call: RoleChangeCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get roleOld(): string {
    return this._call.inputValues[1].value.toString();
  }

  get roleNew(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class RoleChangeCall__Outputs {
  _call: RoleChangeCall;

  constructor(call: RoleChangeCall) {
    this._call = call;
  }
}

export class RoleCreateCall extends ethereum.Call {
  get inputs(): RoleCreateCall__Inputs {
    return new RoleCreateCall__Inputs(this);
  }

  get outputs(): RoleCreateCall__Outputs {
    return new RoleCreateCall__Outputs(this);
  }
}

export class RoleCreateCall__Inputs {
  _call: RoleCreateCall;

  constructor(call: RoleCreateCall) {
    this._call = call;
  }

  get role(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class RoleCreateCall__Outputs {
  _call: RoleCreateCall;

  constructor(call: RoleCreateCall) {
    this._call = call;
  }
}

export class RoleRemoveCall extends ethereum.Call {
  get inputs(): RoleRemoveCall__Inputs {
    return new RoleRemoveCall__Inputs(this);
  }

  get outputs(): RoleRemoveCall__Outputs {
    return new RoleRemoveCall__Outputs(this);
  }
}

export class RoleRemoveCall__Inputs {
  _call: RoleRemoveCall;

  constructor(call: RoleRemoveCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get role(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class RoleRemoveCall__Outputs {
  _call: RoleRemoveCall;

  constructor(call: RoleRemoveCall) {
    this._call = call;
  }
}

export class RoleRemoveFromTokenCall extends ethereum.Call {
  get inputs(): RoleRemoveFromTokenCall__Inputs {
    return new RoleRemoveFromTokenCall__Inputs(this);
  }

  get outputs(): RoleRemoveFromTokenCall__Outputs {
    return new RoleRemoveFromTokenCall__Outputs(this);
  }
}

export class RoleRemoveFromTokenCall__Inputs {
  _call: RoleRemoveFromTokenCall;

  constructor(call: RoleRemoveFromTokenCall) {
    this._call = call;
  }

  get sbt(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get role(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class RoleRemoveFromTokenCall__Outputs {
  _call: RoleRemoveFromTokenCall;

  constructor(call: RoleRemoveFromTokenCall) {
    this._call = call;
  }
}

export class RuleAddCall extends ethereum.Call {
  get inputs(): RuleAddCall__Inputs {
    return new RuleAddCall__Inputs(this);
  }

  get outputs(): RuleAddCall__Outputs {
    return new RuleAddCall__Outputs(this);
  }
}

export class RuleAddCall__Inputs {
  _call: RuleAddCall;

  constructor(call: RuleAddCall) {
    this._call = call;
  }

  get rule(): RuleAddCallRuleStruct {
    return changetype<RuleAddCallRuleStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }

  get effects(): Array<RuleAddCallEffectsStruct> {
    return this._call.inputValues[1].value.toTupleArray<RuleAddCallEffectsStruct>();
  }

  get confirmation(): RuleAddCallConfirmationStruct {
    return changetype<RuleAddCallConfirmationStruct>(
      this._call.inputValues[2].value.toTuple(),
    );
  }
}

export class RuleAddCall__Outputs {
  _call: RuleAddCall;

  constructor(call: RuleAddCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RuleAddCallRuleStruct extends ethereum.Tuple {
  get about(): Bytes {
    return this[0].toBytes();
  }

  get affected(): string {
    return this[1].toString();
  }

  get negation(): boolean {
    return this[2].toBoolean();
  }

  get uri(): string {
    return this[3].toString();
  }

  get disabled(): boolean {
    return this[4].toBoolean();
  }
}

export class RuleAddCallEffectsStruct extends ethereum.Tuple {
  get domain(): string {
    return this[0].toString();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }

  get disabled(): boolean {
    return this[2].toBoolean();
  }
}

export class RuleAddCallConfirmationStruct extends ethereum.Tuple {
  get ruling(): string {
    return this[0].toString();
  }

  get evidence(): boolean {
    return this[1].toBoolean();
  }

  get witness(): BigInt {
    return this[2].toBigInt();
  }
}

export class RuleDisableCall extends ethereum.Call {
  get inputs(): RuleDisableCall__Inputs {
    return new RuleDisableCall__Inputs(this);
  }

  get outputs(): RuleDisableCall__Outputs {
    return new RuleDisableCall__Outputs(this);
  }
}

export class RuleDisableCall__Inputs {
  _call: RuleDisableCall;

  constructor(call: RuleDisableCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get disabled(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class RuleDisableCall__Outputs {
  _call: RuleDisableCall;

  constructor(call: RuleDisableCall) {
    this._call = call;
  }
}

export class RuleUpdateConditionsCall extends ethereum.Call {
  get inputs(): RuleUpdateConditionsCall__Inputs {
    return new RuleUpdateConditionsCall__Inputs(this);
  }

  get outputs(): RuleUpdateConditionsCall__Outputs {
    return new RuleUpdateConditionsCall__Outputs(this);
  }
}

export class RuleUpdateConditionsCall__Inputs {
  _call: RuleUpdateConditionsCall;

  constructor(call: RuleUpdateConditionsCall) {
    this._call = call;
  }

  get ruleId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get conditions(): Array<RuleUpdateConditionsCallConditionsStruct> {
    return this._call.inputValues[1].value.toTupleArray<RuleUpdateConditionsCallConditionsStruct>();
  }
}

export class RuleUpdateConditionsCall__Outputs {
  _call: RuleUpdateConditionsCall;

  constructor(call: RuleUpdateConditionsCall) {
    this._call = call;
  }
}

export class RuleUpdateConditionsCallConditionsStruct extends ethereum.Tuple {
  get repo(): string {
    return this[0].toString();
  }

  get id(): Bytes {
    return this[1].toBytes();
  }
}

export class RuleUpdateConfirmationCall extends ethereum.Call {
  get inputs(): RuleUpdateConfirmationCall__Inputs {
    return new RuleUpdateConfirmationCall__Inputs(this);
  }

  get outputs(): RuleUpdateConfirmationCall__Outputs {
    return new RuleUpdateConfirmationCall__Outputs(this);
  }
}

export class RuleUpdateConfirmationCall__Inputs {
  _call: RuleUpdateConfirmationCall;

  constructor(call: RuleUpdateConfirmationCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get confirmation(): RuleUpdateConfirmationCallConfirmationStruct {
    return changetype<RuleUpdateConfirmationCallConfirmationStruct>(
      this._call.inputValues[1].value.toTuple(),
    );
  }
}

export class RuleUpdateConfirmationCall__Outputs {
  _call: RuleUpdateConfirmationCall;

  constructor(call: RuleUpdateConfirmationCall) {
    this._call = call;
  }
}

export class RuleUpdateConfirmationCallConfirmationStruct extends ethereum.Tuple {
  get ruling(): string {
    return this[0].toString();
  }

  get evidence(): boolean {
    return this[1].toBoolean();
  }

  get witness(): BigInt {
    return this[2].toBigInt();
  }
}

export class RuleUpdateEffectsCall extends ethereum.Call {
  get inputs(): RuleUpdateEffectsCall__Inputs {
    return new RuleUpdateEffectsCall__Inputs(this);
  }

  get outputs(): RuleUpdateEffectsCall__Outputs {
    return new RuleUpdateEffectsCall__Outputs(this);
  }
}

export class RuleUpdateEffectsCall__Inputs {
  _call: RuleUpdateEffectsCall;

  constructor(call: RuleUpdateEffectsCall) {
    this._call = call;
  }

  get ruleId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get effects(): Array<RuleUpdateEffectsCallEffectsStruct> {
    return this._call.inputValues[1].value.toTupleArray<RuleUpdateEffectsCallEffectsStruct>();
  }
}

export class RuleUpdateEffectsCall__Outputs {
  _call: RuleUpdateEffectsCall;

  constructor(call: RuleUpdateEffectsCall) {
    this._call = call;
  }
}

export class RuleUpdateEffectsCallEffectsStruct extends ethereum.Tuple {
  get domain(): string {
    return this[0].toString();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }

  get disabled(): boolean {
    return this[2].toBoolean();
  }
}

export class RuleUpdateURICall extends ethereum.Call {
  get inputs(): RuleUpdateURICall__Inputs {
    return new RuleUpdateURICall__Inputs(this);
  }

  get outputs(): RuleUpdateURICall__Outputs {
    return new RuleUpdateURICall__Outputs(this);
  }
}

export class RuleUpdateURICall__Inputs {
  _call: RuleUpdateURICall;

  constructor(call: RuleUpdateURICall) {
    this._call = call;
  }

  get ruleId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get uri(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class RuleUpdateURICall__Outputs {
  _call: RuleUpdateURICall;

  constructor(call: RuleUpdateURICall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetContractURICall extends ethereum.Call {
  get inputs(): SetContractURICall__Inputs {
    return new SetContractURICall__Inputs(this);
  }

  get outputs(): SetContractURICall__Outputs {
    return new SetContractURICall__Outputs(this);
  }
}

export class SetContractURICall__Inputs {
  _call: SetContractURICall;

  constructor(call: SetContractURICall) {
    this._call = call;
  }

  get contractUri(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetContractURICall__Outputs {
  _call: SetContractURICall;

  constructor(call: SetContractURICall) {
    this._call = call;
  }
}

export class SetHubCall extends ethereum.Call {
  get inputs(): SetHubCall__Inputs {
    return new SetHubCall__Inputs(this);
  }

  get outputs(): SetHubCall__Outputs {
    return new SetHubCall__Outputs(this);
  }
}

export class SetHubCall__Inputs {
  _call: SetHubCall;

  constructor(call: SetHubCall) {
    this._call = call;
  }

  get hubAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetHubCall__Outputs {
  _call: SetHubCall;

  constructor(call: SetHubCall) {
    this._call = call;
  }
}

export class SetRoleURICall extends ethereum.Call {
  get inputs(): SetRoleURICall__Inputs {
    return new SetRoleURICall__Inputs(this);
  }

  get outputs(): SetRoleURICall__Outputs {
    return new SetRoleURICall__Outputs(this);
  }
}

export class SetRoleURICall__Inputs {
  _call: SetRoleURICall;

  constructor(call: SetRoleURICall) {
    this._call = call;
  }

  get role(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _tokenURI(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class SetRoleURICall__Outputs {
  _call: SetRoleURICall;

  constructor(call: SetRoleURICall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class RunActionDataCall extends ethereum.Call {
  get inputs(): RunActionDataCall__Inputs {
    return new RunActionDataCall__Inputs(this);
  }

  get outputs(): RunActionDataCall__Outputs {
    return new RunActionDataCall__Outputs(this);
  }
}

export class RunActionDataCall__Inputs {
  _call: RunActionDataCall;

  constructor(call: RunActionDataCall) {
    this._call = call;
  }

  get actionGUID(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class RunActionDataCall__Outputs {
  _call: RunActionDataCall;

  constructor(call: RunActionDataCall) {
    this._call = call;
  }
}

export class RunActionXXCall extends ethereum.Call {
  get inputs(): RunActionXXCall__Inputs {
    return new RunActionXXCall__Inputs(this);
  }

  get outputs(): RunActionXXCall__Outputs {
    return new RunActionXXCall__Outputs(this);
  }
}

export class RunActionXXCall__Inputs {
  _call: RunActionXXCall;

  constructor(call: RunActionXXCall) {
    this._call = call;
  }

  get actionGUID(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get roleMap(): Array<RunActionXXCallRoleMapStruct> {
    return this._call.inputValues[1].value.toTupleArray<RunActionXXCallRoleMapStruct>();
  }

  get intMap(): Array<RunActionXXCallIntMapStruct> {
    return this._call.inputValues[2].value.toTupleArray<RunActionXXCallIntMapStruct>();
  }

  get strMap(): Array<RunActionXXCallStrMapStruct> {
    return this._call.inputValues[3].value.toTupleArray<RunActionXXCallStrMapStruct>();
  }
}

export class RunActionXXCall__Outputs {
  _call: RunActionXXCall;

  constructor(call: RunActionXXCall) {
    this._call = call;
  }
}

export class RunActionXXCallRoleMapStruct extends ethereum.Tuple {
  get role(): string {
    return this[0].toString();
  }

  get addr(): Address {
    return this[1].toAddress();
  }
}

export class RunActionXXCallIntMapStruct extends ethereum.Tuple {
  get role(): string {
    return this[0].toString();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }
}

export class RunActionXXCallStrMapStruct extends ethereum.Tuple {
  get role(): string {
    return this[0].toString();
  }

  get value(): string {
    return this[1].toString();
  }
}

export class RuleAdd1Call extends ethereum.Call {
  get inputs(): RuleAdd1Call__Inputs {
    return new RuleAdd1Call__Inputs(this);
  }

  get outputs(): RuleAdd1Call__Outputs {
    return new RuleAdd1Call__Outputs(this);
  }
}

export class RuleAdd1Call__Inputs {
  _call: RuleAdd1Call;

  constructor(call: RuleAdd1Call) {
    this._call = call;
  }

  get rule(): RuleAdd1CallRuleStruct {
    return changetype<RuleAdd1CallRuleStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }

  get confirmation(): RuleAdd1CallConfirmationStruct {
    return changetype<RuleAdd1CallConfirmationStruct>(
      this._call.inputValues[1].value.toTuple(),
    );
  }

  get effects(): Array<RuleAdd1CallEffectsStruct> {
    return this._call.inputValues[2].value.toTupleArray<RuleAdd1CallEffectsStruct>();
  }
}

export class RuleAdd1Call__Outputs {
  _call: RuleAdd1Call;

  constructor(call: RuleAdd1Call) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RuleAdd1CallRuleStruct extends ethereum.Tuple {
  get about(): Bytes {
    return this[0].toBytes();
  }

  get affected(): string {
    return this[1].toString();
  }

  get negation(): boolean {
    return this[2].toBoolean();
  }

  get uri(): string {
    return this[3].toString();
  }

  get disabled(): boolean {
    return this[4].toBoolean();
  }
}

export class RuleAdd1CallConfirmationStruct extends ethereum.Tuple {
  get ruling(): string {
    return this[0].toString();
  }

  get evidence(): boolean {
    return this[1].toBoolean();
  }

  get witness(): BigInt {
    return this[2].toBigInt();
  }
}

export class RuleAdd1CallEffectsStruct extends ethereum.Tuple {
  get domain(): string {
    return this[0].toString();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }

  get disabled(): boolean {
    return this[2].toBoolean();
  }
}

export class RuleUpdateCall extends ethereum.Call {
  get inputs(): RuleUpdateCall__Inputs {
    return new RuleUpdateCall__Inputs(this);
  }

  get outputs(): RuleUpdateCall__Outputs {
    return new RuleUpdateCall__Outputs(this);
  }
}

export class RuleUpdateCall__Inputs {
  _call: RuleUpdateCall;

  constructor(call: RuleUpdateCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get rule(): RuleUpdateCallRuleStruct {
    return changetype<RuleUpdateCallRuleStruct>(
      this._call.inputValues[1].value.toTuple(),
    );
  }

  get effects(): Array<RuleUpdateCallEffectsStruct> {
    return this._call.inputValues[2].value.toTupleArray<RuleUpdateCallEffectsStruct>();
  }
}

export class RuleUpdateCall__Outputs {
  _call: RuleUpdateCall;

  constructor(call: RuleUpdateCall) {
    this._call = call;
  }
}

export class RuleUpdateCallRuleStruct extends ethereum.Tuple {
  get about(): Bytes {
    return this[0].toBytes();
  }

  get affected(): string {
    return this[1].toString();
  }

  get negation(): boolean {
    return this[2].toBoolean();
  }

  get uri(): string {
    return this[3].toString();
  }

  get disabled(): boolean {
    return this[4].toBoolean();
  }
}

export class RuleUpdateCallEffectsStruct extends ethereum.Tuple {
  get domain(): string {
    return this[0].toString();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }

  get disabled(): boolean {
    return this[2].toBoolean();
  }
}

export class SendFundsCall extends ethereum.Call {
  get inputs(): SendFundsCall__Inputs {
    return new SendFundsCall__Inputs(this);
  }

  get outputs(): SendFundsCall__Outputs {
    return new SendFundsCall__Outputs(this);
  }
}

export class SendFundsCall__Inputs {
  _call: SendFundsCall;

  constructor(call: SendFundsCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SendFundsCall__Outputs {
  _call: SendFundsCall;

  constructor(call: SendFundsCall) {
    this._call = call;
  }
}

export class SendFundsERC20Call extends ethereum.Call {
  get inputs(): SendFundsERC20Call__Inputs {
    return new SendFundsERC20Call__Inputs(this);
  }

  get outputs(): SendFundsERC20Call__Outputs {
    return new SendFundsERC20Call__Outputs(this);
  }
}

export class SendFundsERC20Call__Inputs {
  _call: SendFundsERC20Call;

  constructor(call: SendFundsERC20Call) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SendFundsERC20Call__Outputs {
  _call: SendFundsERC20Call;

  constructor(call: SendFundsERC20Call) {
    this._call = call;
  }
}

export class ApplyToTaskCall extends ethereum.Call {
  get inputs(): ApplyToTaskCall__Inputs {
    return new ApplyToTaskCall__Inputs(this);
  }

  get outputs(): ApplyToTaskCall__Outputs {
    return new ApplyToTaskCall__Outputs(this);
  }
}

export class ApplyToTaskCall__Inputs {
  _call: ApplyToTaskCall;

  constructor(call: ApplyToTaskCall) {
    this._call = call;
  }

  get taskAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get uri(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class ApplyToTaskCall__Outputs {
  _call: ApplyToTaskCall;

  constructor(call: ApplyToTaskCall) {
    this._call = call;
  }
}

export class DeliverTaskCall extends ethereum.Call {
  get inputs(): DeliverTaskCall__Inputs {
    return new DeliverTaskCall__Inputs(this);
  }

  get outputs(): DeliverTaskCall__Outputs {
    return new DeliverTaskCall__Outputs(this);
  }
}

export class DeliverTaskCall__Inputs {
  _call: DeliverTaskCall;

  constructor(call: DeliverTaskCall) {
    this._call = call;
  }

  get taskAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get uri(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class DeliverTaskCall__Outputs {
  _call: DeliverTaskCall;

  constructor(call: DeliverTaskCall) {
    this._call = call;
  }
}

export class MakeTaskCall extends ethereum.Call {
  get inputs(): MakeTaskCall__Inputs {
    return new MakeTaskCall__Inputs(this);
  }

  get outputs(): MakeTaskCall__Outputs {
    return new MakeTaskCall__Outputs(this);
  }
}

export class MakeTaskCall__Inputs {
  _call: MakeTaskCall;

  constructor(call: MakeTaskCall) {
    this._call = call;
  }

  get type_(): string {
    return this._call.inputValues[0].value.toString();
  }

  get name_(): string {
    return this._call.inputValues[1].value.toString();
  }

  get uri_(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class MakeTaskCall__Outputs {
  _call: MakeTaskCall;

  constructor(call: MakeTaskCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class DelegateCall extends ethereum.Call {
  get inputs(): DelegateCall__Inputs {
    return new DelegateCall__Inputs(this);
  }

  get outputs(): DelegateCall__Outputs {
    return new DelegateCall__Outputs(this);
  }
}

export class DelegateCall__Inputs {
  _call: DelegateCall;

  constructor(call: DelegateCall) {
    this._call = call;
  }

  get delegatee(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DelegateCall__Outputs {
  _call: DelegateCall;

  constructor(call: DelegateCall) {
    this._call = call;
  }
}

export class DelegateBySigCall extends ethereum.Call {
  get inputs(): DelegateBySigCall__Inputs {
    return new DelegateBySigCall__Inputs(this);
  }

  get outputs(): DelegateBySigCall__Outputs {
    return new DelegateBySigCall__Outputs(this);
  }
}

export class DelegateBySigCall__Inputs {
  _call: DelegateBySigCall;

  constructor(call: DelegateBySigCall) {
    this._call = call;
  }

  get delegatee(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get nonce(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get expiry(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class DelegateBySigCall__Outputs {
  _call: DelegateBySigCall;

  constructor(call: DelegateBySigCall) {
    this._call = call;
  }
}

export class CaseMakeCall extends ethereum.Call {
  get inputs(): CaseMakeCall__Inputs {
    return new CaseMakeCall__Inputs(this);
  }

  get outputs(): CaseMakeCall__Outputs {
    return new CaseMakeCall__Outputs(this);
  }
}

export class CaseMakeCall__Inputs {
  _call: CaseMakeCall;

  constructor(call: CaseMakeCall) {
    this._call = call;
  }

  get name_(): string {
    return this._call.inputValues[0].value.toString();
  }

  get uri_(): string {
    return this._call.inputValues[1].value.toString();
  }

  get rules(): Array<CaseMakeCallRulesStruct> {
    return this._call.inputValues[2].value.toTupleArray<CaseMakeCallRulesStruct>();
  }

  get assignRoles(): Array<CaseMakeCallAssignRolesStruct> {
    return this._call.inputValues[3].value.toTupleArray<CaseMakeCallAssignRolesStruct>();
  }

  get posts(): Array<CaseMakeCallPostsStruct> {
    return this._call.inputValues[4].value.toTupleArray<CaseMakeCallPostsStruct>();
  }
}

export class CaseMakeCall__Outputs {
  _call: CaseMakeCall;

  constructor(call: CaseMakeCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class CaseMakeCallRulesStruct extends ethereum.Tuple {
  get game(): Address {
    return this[0].toAddress();
  }

  get ruleId(): BigInt {
    return this[1].toBigInt();
  }
}

export class CaseMakeCallAssignRolesStruct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get role(): string {
    return this[1].toString();
  }
}

export class CaseMakeCallPostsStruct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get entRole(): string {
    return this[1].toString();
  }

  get uri(): string {
    return this[2].toString();
  }
}

export class CaseMakeClosedCall extends ethereum.Call {
  get inputs(): CaseMakeClosedCall__Inputs {
    return new CaseMakeClosedCall__Inputs(this);
  }

  get outputs(): CaseMakeClosedCall__Outputs {
    return new CaseMakeClosedCall__Outputs(this);
  }
}

export class CaseMakeClosedCall__Inputs {
  _call: CaseMakeClosedCall;

  constructor(call: CaseMakeClosedCall) {
    this._call = call;
  }

  get name_(): string {
    return this._call.inputValues[0].value.toString();
  }

  get uri_(): string {
    return this._call.inputValues[1].value.toString();
  }

  get rules(): Array<CaseMakeClosedCallRulesStruct> {
    return this._call.inputValues[2].value.toTupleArray<CaseMakeClosedCallRulesStruct>();
  }

  get assignRoles(): Array<CaseMakeClosedCallAssignRolesStruct> {
    return this._call.inputValues[3].value.toTupleArray<CaseMakeClosedCallAssignRolesStruct>();
  }

  get posts(): Array<CaseMakeClosedCallPostsStruct> {
    return this._call.inputValues[4].value.toTupleArray<CaseMakeClosedCallPostsStruct>();
  }

  get decisionURI_(): string {
    return this._call.inputValues[5].value.toString();
  }
}

export class CaseMakeClosedCall__Outputs {
  _call: CaseMakeClosedCall;

  constructor(call: CaseMakeClosedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class CaseMakeClosedCallRulesStruct extends ethereum.Tuple {
  get game(): Address {
    return this[0].toAddress();
  }

  get ruleId(): BigInt {
    return this[1].toBigInt();
  }
}

export class CaseMakeClosedCallAssignRolesStruct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get role(): string {
    return this[1].toString();
  }
}

export class CaseMakeClosedCallPostsStruct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get entRole(): string {
    return this[1].toString();
  }

  get uri(): string {
    return this[2].toString();
  }
}

export class CaseMakeOpenCall extends ethereum.Call {
  get inputs(): CaseMakeOpenCall__Inputs {
    return new CaseMakeOpenCall__Inputs(this);
  }

  get outputs(): CaseMakeOpenCall__Outputs {
    return new CaseMakeOpenCall__Outputs(this);
  }
}

export class CaseMakeOpenCall__Inputs {
  _call: CaseMakeOpenCall;

  constructor(call: CaseMakeOpenCall) {
    this._call = call;
  }

  get name_(): string {
    return this._call.inputValues[0].value.toString();
  }

  get uri_(): string {
    return this._call.inputValues[1].value.toString();
  }

  get rules(): Array<CaseMakeOpenCallRulesStruct> {
    return this._call.inputValues[2].value.toTupleArray<CaseMakeOpenCallRulesStruct>();
  }

  get assignRoles(): Array<CaseMakeOpenCallAssignRolesStruct> {
    return this._call.inputValues[3].value.toTupleArray<CaseMakeOpenCallAssignRolesStruct>();
  }

  get posts(): Array<CaseMakeOpenCallPostsStruct> {
    return this._call.inputValues[4].value.toTupleArray<CaseMakeOpenCallPostsStruct>();
  }
}

export class CaseMakeOpenCall__Outputs {
  _call: CaseMakeOpenCall;

  constructor(call: CaseMakeOpenCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class CaseMakeOpenCallRulesStruct extends ethereum.Tuple {
  get game(): Address {
    return this[0].toAddress();
  }

  get ruleId(): BigInt {
    return this[1].toBigInt();
  }
}

export class CaseMakeOpenCallAssignRolesStruct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get role(): string {
    return this[1].toString();
  }
}

export class CaseMakeOpenCallPostsStruct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get entRole(): string {
    return this[1].toString();
  }

  get uri(): string {
    return this[2].toString();
  }
}
